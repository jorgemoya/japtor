/* parser generated by jison 0.4.15 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[2,7],$V1=[1,9],$V2=[1,10],$V3=[1,13],$V4=[2,21],$V5=[1,14],$V6=[1,17],$V7=[1,18],$V8=[1,19],$V9=[1,20],$Va=[1,21],$Vb=[4,6,7,24,32,42,43,48],$Vc=[1,37],$Vd=[2,10],$Ve=[14,18,19,20,21,22,28],$Vf=[6,32,42,43,48],$Vg=[1,54],$Vh=[2,28],$Vi=[1,55],$Vj=[1,56],$Vk=[1,57],$Vl=[1,73],$Vm=[1,74],$Vn=[1,75],$Vo=[1,76],$Vp=[1,77],$Vq=[1,78],$Vr=[7,28],$Vs=[7,28,52,53],$Vt=[7,28,40,52,53,56,57,58,63,64,65],$Vu=[7,28,40,52,53,56,57,58,63,64,65,70,71,72],$Vv=[6,27,76,77,78,79],$Vw=[7,28,40,52,53,56,57,58];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"program":3,"EOF":4,"PROGRAM":5,"ID":6,";":7,"program_init":8,"program_code":9,"vars":10,"functions":11,"VAR":12,"var_init":13,",":14,"type":15,"vars_params":16,"vars_params_init":17,"INT":18,"FLOAT":19,"STRING":20,"BOOL":21,"VOID":22,"funct":23,"FUNCTION":24,"funct_init":25,"params":26,"(":27,")":28,"{":29,"funct_code":30,"block":31,"}":32,"funct_end":33,"statutes":34,"statute":35,"assignment":36,"write":37,"if_":38,"while_":39,"=":40,"expression":41,"WRITE":42,"IF":43,"if_condition":44,"else_":45,"else_code":46,"ELSE":47,"WHILE":48,"while_condition":49,"comp":50,"logical_ops":51,"&":52,"|":53,"exp":54,"comparison_ops":55,"<":56,">":57,"!":58,"term":59,"end_exp":60,"validation_exp":61,"plusminus":62,"+":63,"-":64,"||":65,"factor":66,"end_term":67,"validation_term":68,"multidivi":69,"*":70,"/":71,"&&":72,"value":73,"params_exp":74,"add_closure":75,"I":76,"F":77,"B":78,"S":79,"$accept":0,"$end":1},
terminals_: {2:"error",4:"EOF",5:"PROGRAM",6:"ID",7:";",12:"VAR",14:",",18:"INT",19:"FLOAT",20:"STRING",21:"BOOL",22:"VOID",24:"FUNCTION",27:"(",28:")",29:"{",32:"}",40:"=",42:"WRITE",43:"IF",47:"ELSE",48:"WHILE",52:"&",53:"|",56:"<",57:">",58:"!",63:"+",64:"-",65:"||",70:"*",71:"/",72:"&&",76:"I",77:"F",78:"B",79:"S"},
productions_: [0,[3,1],[3,5],[8,0],[9,2],[10,5],[10,3],[10,0],[13,2],[16,2],[16,0],[17,2],[17,3],[15,1],[15,1],[15,1],[15,1],[15,1],[11,3],[11,1],[23,3],[23,0],[25,2],[26,6],[30,3],[33,0],[31,1],[34,2],[34,0],[35,1],[35,1],[35,1],[35,1],[36,4],[37,5],[38,6],[44,3],[45,5],[45,1],[46,1],[39,6],[49,3],[41,1],[41,3],[51,2],[51,2],[50,1],[50,3],[55,2],[55,2],[55,2],[55,2],[55,1],[55,1],[54,2],[60,3],[60,1],[61,0],[62,1],[62,1],[62,1],[59,2],[67,3],[67,1],[68,0],[69,1],[69,1],[69,1],[66,1],[66,2],[66,4],[74,3],[74,0],[75,0],[73,1],[73,1],[73,1],[73,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return null;
break;
case 3:

					var proc = new Proc("global", "void", dirProc(), [], []);
					yy.procs.push(proc);
					// assignMemory(yy.procs);
					scope.push("global");
				
break;
case 8:

					var currentScope = scope.stackTop();
					var proc = findProc(yy, currentScope);
					var variable = {
						dir: assignMemory($$[$0-1], false),
						id: $$[$0],
						type: $$[$0-1]
					}
					proc.vars.push(variable);
				
break;
case 11: case 12:

					var currentScope = scope.stackTop();
					var proc = findProc(yy, currentScope);
					var variable = {
						dir: assignMemory($$[$0-1], false),
						id: $$[$0],
						type: $$[$0-1]
					}
					proc.vars.push(variable);
					proc.params.push($$[$0-1]);
				
break;
case 22:

					var proc = new Proc($$[$0], $$[$0-1], dirProc(), [], []);
					yy.procs.push(proc);
					scope.push($$[$0]);
				
break;
case 25:

					scope.pop();
				
break;
case 33:

					var var1 = ids.pop();
					var var1t = types.pop();
					var id = $$[$0-3];
					var idt = findTypeId(yy, id);
					if(var1t == idt || (var1t == "int" && idt == "float"))
						var op = yy.quads.push([$$[$0-2], var1, "", id]);
					else
						alert("Error in semantics.");;
				
break;
case 34:

					yy.quads.push(["write", "", "", ids.pop()]);
				
break;
case 36: case 41:

					var type = types.pop();
					if(type == "boolean") {
						yy.quads.push(["gotof", ids.pop(), "", ""]);
						jumps.push(yy.quads.length - 1);
					} else {
						alert("Error!");
					}
				
break;
case 37: case 38: case 40:

					var jump = jumps.pop();
					yy.quads[jump][3] = yy.quads.length;
				
break;
case 39:

					var jump = jumps.pop();
					yy.quads.push(["goto", "", "", ""]);
					yy.quads[jump][3] = yy.quads.length;
					jumps.push(yy.quads.length - 1);
				
break;
case 43: case 47:

					var var2 = ids.pop();
					var var2t = types.pop();
					var var1 = ids.pop();
					var var1t = types.pop();
					var op = ops.pop();
					var type = validateSem(op, var1t, var2t);
					if(type != "x")
						var op = [op, var1, var2, createTemp(yy, type)];
					else
						alert("Error in semantics.");
					yy.quads.push(op);
				
break;
case 44:

					ops.push("&&");
				
break;
case 45:

					ops.push("||");
				
break;
case 48:

					ops.push("<=");
				
break;
case 49:

					ops.push(">=");
				
break;
case 50:

					ops.push("!=");
				
break;
case 51:

					ops.push("==");
				
break;
case 52:

					ops.push(">");
				
break;
case 53:

					ops.push("<");
				
break;
case 57:

					if (ops.stackTop() == "+" || ops.stackTop() == "-") {
						var var2 = ids.pop();
						var var2t = types.pop();
						var var1 = ids.pop();
						var var1t = types.pop();
						var op = ops.pop();
						var type = validateSem(op, var1t, var2t);
						if(type != "x")
							var op = [op, var1, var2, createTemp(yy, type)];
						else
							alert("Error in semantics.");
						yy.quads.push(op);
					}
				
break;
case 58: case 59:

					ops.push($$[$0]);
				
break;
case 64:

					if (ops.stackTop() == "*" || ops.stackTop() == "/") {
						var var2 = ids.pop();
						var var2t = types.pop();
						var var1 = ids.pop();
						var var1t = types.pop();
						var op = ops.pop();
						var type = validateSem(op, var1t, var2t);
						if(type != "x")
							var op = [op, var1, var2, createTemp(yy, type)];
						else
							alert("Error in semantics.");;
						yy.quads.push(op);
					}
				
break;
case 65: case 66:

				ops.push($$[$0]);
			
break;
case 69:

					ids.push($$[$0-1]);
					types.push(findTypeId(yy, $$[$0-1]));
				
break;
case 70:

					ops.pop();
				
break;
case 73:

					ops.push("|");
				
break;
case 74:

					types.push("int");
					ids.push($$[$0]);
				
break;
case 75:

					types.push("float");
					ids.push($$[$0]);
				
break;
case 76:

					types.push("boolean");
					ids.push($$[$0]);
				
break;
case 77:

					types.push("string");
					ids.push($$[$0]);
				
break;
}
},
table: [{3:1,4:[1,2],5:[1,3]},{1:[3]},{1:[2,1]},{6:[1,4]},{7:[1,5]},o([4,7,12,14,24],[2,3],{8:6}),o([4,7,24],$V0,{9:7,10:8,12:$V1,14:$V2}),{1:[2,2]},{4:$V3,7:$V4,11:11,23:12,24:$V5},{13:15,15:16,18:$V6,19:$V7,20:$V8,21:$V9,22:$Va},{13:22,15:16,18:$V6,19:$V7,20:$V8,21:$V9,22:$Va},{1:[2,4]},{7:[1,23]},{1:[2,19]},{15:25,18:$V6,19:$V7,20:$V8,21:$V9,22:$Va,25:24},{7:$V0,10:26,12:$V1,14:$V2},{6:[1,27]},{6:[2,13]},{6:[2,14]},{6:[2,15]},{6:[2,16]},{6:[2,17]},o($Vb,$V0,{10:28,12:$V1,14:$V2}),{4:$V3,7:$V4,11:29,23:12,24:$V5},{26:30,27:[1,31]},{6:[1,32]},{7:[1,33]},o([4,6,7,12,14,24,32,42,43,48],[2,8]),o($Vb,[2,6]),{1:[2,18]},{7:[2,20]},{14:$Vc,15:36,16:34,17:35,18:$V6,19:$V7,20:$V8,21:$V9,22:$Va,28:$Vd},{27:[2,22]},o($Vb,$V0,{10:38,12:$V1,14:$V2}),{28:[1,39]},{14:$Vc,15:36,16:40,17:35,18:$V6,19:$V7,20:$V8,21:$V9,22:$Va,28:$Vd},{6:[1,41]},{15:42,18:$V6,19:$V7,20:$V8,21:$V9,22:$Va},o($Vb,[2,5]),{29:[1,43]},{28:[2,9]},o($Ve,[2,11]),{6:[1,44]},o($Vf,$V0,{10:45,12:$V1,14:$V2}),o($Ve,[2,12]),{6:$Vg,30:46,31:47,32:$Vh,34:48,35:49,36:50,37:51,38:52,39:53,42:$Vi,43:$Vj,48:$Vk},{7:[2,23]},{32:[1,58]},{32:[2,26]},{6:$Vg,32:$Vh,34:59,35:49,36:50,37:51,38:52,39:53,42:$Vi,43:$Vj,48:$Vk},o($Vf,[2,29]),o($Vf,[2,30]),o($Vf,[2,31]),o($Vf,[2,32]),{40:[1,60]},{27:[1,61]},{27:[1,63],44:62},{27:[1,65],49:64},{7:[2,25],33:66},{32:[2,27]},{6:$Vl,27:$Vm,41:67,50:68,54:69,59:70,66:71,73:72,76:$Vn,77:$Vo,78:$Vp,79:$Vq},{6:$Vl,27:$Vm,41:79,50:68,54:69,59:70,66:71,73:72,76:$Vn,77:$Vo,78:$Vp,79:$Vq},{29:[1,80]},{6:$Vl,27:$Vm,41:81,50:68,54:69,59:70,66:71,73:72,76:$Vn,77:$Vo,78:$Vp,79:$Vq},{29:[1,82]},{6:$Vl,27:$Vm,41:83,50:68,54:69,59:70,66:71,73:72,76:$Vn,77:$Vo,78:$Vp,79:$Vq},{7:[2,24]},{7:[1,84]},o($Vr,[2,42],{51:85,52:[1,86],53:[1,87]}),o($Vs,[2,46],{55:88,40:[1,92],56:[1,89],57:[1,90],58:[1,91]}),o($Vt,[2,57],{60:93,61:94}),o($Vu,[2,64],{67:95,68:96}),o($Vu,[2,68]),o($Vu,[2,72],{74:97,27:[1,98]}),o($Vv,[2,73],{75:99}),o($Vu,[2,74]),o($Vu,[2,75]),o($Vu,[2,76]),o($Vu,[2,77]),{28:[1,100]},{6:$Vg,31:101,32:$Vh,34:48,35:49,36:50,37:51,38:52,39:53,42:$Vi,43:$Vj,48:$Vk},{28:[1,102]},{6:$Vg,31:103,32:$Vh,34:48,35:49,36:50,37:51,38:52,39:53,42:$Vi,43:$Vj,48:$Vk},{28:[1,104]},o($Vf,[2,33]),{6:$Vl,27:$Vm,50:105,54:69,59:70,66:71,73:72,76:$Vn,77:$Vo,78:$Vp,79:$Vq},{52:[1,106]},{53:[1,107]},{6:$Vl,27:$Vm,54:108,59:70,66:71,73:72,76:$Vn,77:$Vo,78:$Vp,79:$Vq},o($Vv,[2,53],{40:[1,109]}),o($Vv,[2,52],{40:[1,110]}),{40:[1,111]},{40:[1,112]},o($Vw,[2,54]),o($Vw,[2,56],{62:113,63:[1,114],64:[1,115],65:[1,116]}),o($Vt,[2,61]),o($Vt,[2,63],{69:117,70:[1,118],71:[1,119],72:[1,120]}),o($Vu,[2,69]),{6:$Vl,27:$Vm,41:121,50:68,54:69,59:70,66:71,73:72,76:$Vn,77:$Vo,78:$Vp,79:$Vq},{6:$Vl,27:$Vm,41:122,50:68,54:69,59:70,66:71,73:72,76:$Vn,77:$Vo,78:$Vp,79:$Vq},{7:[1,123]},{32:[1,124]},{29:[2,36]},{32:[1,125]},{29:[2,41]},o($Vr,[2,43]),o($Vv,[2,44]),o($Vv,[2,45]),o($Vs,[2,47]),o($Vv,[2,48]),o($Vv,[2,49]),o($Vv,[2,50]),o($Vv,[2,51]),{6:$Vl,27:$Vm,54:126,59:70,66:71,73:72,76:$Vn,77:$Vo,78:$Vp,79:$Vq},o($Vv,[2,58]),o($Vv,[2,59]),o($Vv,[2,60]),{6:$Vl,27:$Vm,59:127,66:71,73:72,76:$Vn,77:$Vo,78:$Vp,79:$Vq},o($Vv,[2,65]),o($Vv,[2,66]),o($Vv,[2,67]),{28:[1,128]},{28:[1,129]},o($Vf,[2,34]),{7:[1,132],45:130,46:131,47:[1,133]},{7:[1,134]},o($Vw,[2,55]),o($Vt,[2,62]),o($Vu,[2,71]),o($Vu,[2,70]),o($Vf,[2,35]),{29:[1,135]},o($Vf,[2,38]),{29:[2,39]},o($Vf,[2,40]),{6:$Vg,31:136,32:$Vh,34:48,35:49,36:50,37:51,38:52,39:53,42:$Vi,43:$Vj,48:$Vk},{32:[1,137]},{7:[1,138]},o($Vf,[2,37])],
defaultActions: {2:[2,1],7:[2,2],11:[2,4],13:[2,19],17:[2,13],18:[2,14],19:[2,15],20:[2,16],21:[2,17],29:[2,18],30:[2,20],32:[2,22],40:[2,9],46:[2,23],48:[2,26],59:[2,27],66:[2,24],102:[2,36],104:[2,41],133:[2,39]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        function lex() {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};


var dirProcs;

var gv_i;
var gv_f;
var gv_st;
var gv_bool;

var lv_i;
var lv_f;
var lv_st;
var lv_bool;

var tv_i;
var tv_f;
var tv_st;
var tv_bool;

initDirs();

var dataStructures = {
    stack : function() {
        var elements = [];

        this.push = function(element) {
            elements.push(element);
        }
        this.pop = function() {
            return elements.pop();
        }
        this.stackTop = function(element) {
            return elements[elements.length - 1];
        }
    }
}

var ids = new dataStructures.stack();
var types = new dataStructures.stack();
var ops = new dataStructures.stack();
var scope = new dataStructures.stack();
var jumps = new dataStructures.stack()

// falta !=
var semanticCube = [
											["v",	"v",	"+",	"-",	"/",	"*",	"==",	"<",	"<=",	">",	">=",	"&&",	"||"],
										 	["int",	"int", 	"int", 	"int", 	"int", 	"int", 	"boolean", 	"boolean", 	"boolean", 	"boolean", 	"boolean", 	"x", 	"x"],
											["float", "float", 	"float", 	"float", 	"float", 	"float", 	"b", 	"b", 	"b", 	"b", 	"b", 	"x", 	"x"],
											["string", "string", 	"string", 	"x", 	"x", 	"x", 	"x", 	"x", 	"x", 	"x", 	"x", 	"x", 	"x"],
											["boolean", "boolean", 	"x", 	"x", 	"x", 	"x", 	"boolean", 	"x", 	"x", 	"x", 	"x", 	"boolean", 	"boolean"],
											["int", "float", 	"float", 	"float", 	"float", 	"float", 	"boolean", 	"boolean", 	"boolean", 	"boolean", 	"boolean", 	"x", 	"x"],
											["int", "string", 	"x", 	"x", 	"x", 	"x", 	"x", 	"x", 	"x", 	"x", 	"x", 	"x", 	"x"],
											["int", "boolean", 	"x", 	"x", 	"x", 	"x", 	"x", 	"x", 	"x", 	"x", 	"x", 	"x", 	"x"],
											["float", "int", 	"float", 	"float", 	"float", 	"float", 	"boolean", 	"boolean", 	"boolean", 	"boolean", 	"boolean", 	"x", 	"x"],
											["float", "string", 	"x", 	"x", 	"x", 	"x", 	"x", 	"x", 	"x", 	"x", 	"x", 	"x", 	"x"],
											["float", "boolean", 	"x", 	"x", 	"x", 	"x", 	"x", 	"x", 	"x", 	"x", 	"x", 	"x", 	"x"],
											["string", "int", 	"x", 	"x", 	"x", 	"x", 	"x", 	"x", 	"x", 	"x", 	"x", 	"x", 	"x"],
											["string", "float", 	"x", 	"x", 	"x", 	"x", 	"x", 	"x", 	"x", 	"x", 	"x", 	"x", 	"x"],
											["string", "boolean", 	"boolean", 	"x", 	"x", 	"x", 	"x", 	"x", 	"x", 	"x", 	"x", 	"x", 	"x"],
											["boolean", "int", 	"x", 	"x", 	"x", 	"x", 	"x", 	"x", 	"x", 	"x", 	"x", 	"x", 	"x"],
											["boolean", "float", 	"x", 	"x", 	"x", 	"x", 	"x", 	"x", 	"x", 	"x", 	"x", 	"x", 	"x"],
											["boolean", "string", 	"x", 	"x", 	"x", 	"x", 	"x", 	"x", 	"x", 	"x", 	"x", 	"x", 	"x"],
										];

var temp = 1;

var Raptor = function() {
	var raptorLexer = function () {};
	raptorLexer.prototype = parser.lexer;

	var raptorParser = function () {
		this.lexer = new raptorLexer();
		this.yy = {
			procs: [],
			quads: []
			// parseError: function(msg, hash) {
			// 	this.done = true;
			// 	var result = new String();
			// 	result.html = '<pre>' + msg + '</pre>';
			// 	result.hash = hash;
			// 	return result;
			// }
		};
	};
	raptorParser.prototype = parser;
	var newParser = new raptorParser();
	return newParser;
};

function Proc(name, type, dir, params, vars){
	this.name = name;
	this.type = type;
	this.dir = dir;
	this.params = params;
	this.vars = vars;
};

Proc.prototype = {
	size : function() {
		return this.vars.length;
	},
	numParams : function() {
		return this.params.length;
	}
}

function dirProc() {
	if(dirProcs < 5000)
		return dirProcs++;
	else
		alert("Out of memory.");
}

function assignMemory(type, tmp) {

	var isGlobal = false;
	if (scope.stackTop() == "global") {
		isGlobal = true;
	}

	if (tmp) {
		switch(type) {
			case 'int':
				if (tv_i < 21000) {
					return tv_i++;
				} else {
					alert("Out of memory!");
				}
				break;
			case 'float':
				if (tv_f < 23000) {
					return tv_f++;
				} else {
					alert("Out of memory!");
				}
				break;
			case 'string':
				if (tv_st < 25000) {
					return tv_st++;
				} else {
					alert("Out of memory!");
				}
				break;
			case 'boolean':
				if (tv_bool < 26000) {
					return tv_bool++;
				} else {
					alert("Out of memory!");
				}
				break;
		}
	} else {
		if(isGlobal) {
			switch(type) {
				case 'int':
					if (gv_i < 7000) {
						return gv_i++;
					} else {
						alert("Out of memory!");
					}
					break;
				case 'float':
					if (gv_f < 9000) {
						return gv_f++;
					} else {
						alert("Out of memory!");
					}
					break;
				case 'string':
					if (gv_st < 11000) {
						return gv_st++;
					} else {
						alert("Out of memory!");
					}
					break;
				case 'boolean':
					if (gv_bool < 12000) {
						return gv_bool++;
					} else {
						alert("Out of memory!");
					}
					break;
			}
		} else {
			switch(type) {
				case 'int':
					if (lv_i < 14000) {
						return lv_i++;
					} else {
						alert("Out of memory!");
					}
					break;
				case 'float':
					if (lv_f < 16000) {
						return lv_f++;
					} else {
						alert("Out of memory!");
					}
					break;
				case 'string':
					if (lv_st < 18000) {
						return lv_st++;
					} else {
						alert("Out of memory!");
					}
					break;
				case 'boolean':
					if (lv_bool < 19000) {
						return lv_bool++;
					} else {
						alert("Out of memory!");
					}
					break;
			}
		}
	}
}

function initDirs() {
	dirProcs = 2000;

	gv_i = 5000;
	gv_f = 7000;
	gv_st = 9000;
	gv_bool = 11000;

	lv_i = 12000;
	lv_f = 14000;
	lv_st = 16000;
	lv_bool = 18000;

	tv_i = 19000;
	tv_f = 21000;
	tv_st = 23000;
	tv_bool = 25000;
}

function validateSem(op, var1, var2) {
		for (var i = 0; i < semanticCube.length; i++) {
			if(semanticCube[i][0] == var1 && semanticCube[i][1] == var2) {
				for (var j = 0; j < semanticCube[0].length; j++) {
					if(semanticCube[0][j] == op)
						return semanticCube[i][j];
				}
			}
		}
}

function findTypeId(yy, id) {
	var currentScope = scope.stackTop();
	var proc = findProc(yy, currentScope);
	for(var i = 0; i < proc.vars.length; i++)
		if(proc.vars[i].id == id)
			return proc.vars[i].type;

	proc = findProc(yy, "global");
	for(var i = 0; i < proc.vars.length; i++)
		if(proc.vars[i].id == id)
			return proc.vars[i].type;

	alert("ID not declared.");
}

function findProc(yy, name) {
	for (var i = 0; i < yy.procs.length; i++) {
		if (yy.procs[i].name == name)
			return yy.procs[i];
	}
}

function createTemp(yy, type) {
	var currentScope = scope.stackTop();
	var proc = findProc(yy, currentScope);

	var tmp = {
		dir: assignMemory(type, true),
		name: "tmp__"+temp,
		type: type
	}

	ids.push(tmp.name);
	types.push(tmp.type);
	temp++;

	proc.vars.push(tmp);

	return tmp.name;
}

if (typeof(window) !== 'undefined') {
	window.Raptor = Raptor;
} else {
	parser.Raptor = Raptor;
}
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* ignore whitespace */;
break;
case 1:return 5;
break;
case 2:return 24;
break;
case 3:return 7;
break;
case 4:return ':';
break;
case 5:return 29;
break;
case 6:return 32;
break;
case 7:return 27;
break;
case 8:return 28;
break;
case 9:return 56;
break;
case 10:return 57;
break;
case 11:return 58;
break;
case 12:return "=";
break;
case 13:return "+";
break;
case 14:return "-";
break;
case 15:return 70;
break;
case 16:return 71;
break;
case 17:return 14;
break;
case 18:return 52;
break;
case 19:return "|";
break;
case 20:return 12;
break;
case 21:return 18;
break;
case 22:return 19;
break;
case 23:return 20;
break;
case 24:return 21;
break;
case 25:return 22;
break;
case 26:return 42;
break;
case 27:return 43;
break;
case 28:return 47;
break;
case 29:return 48;
break;
case 30:return 77;
break;
case 31:return 76;
break;
case 32:return 78;
break;
case 33:return 6;
break;
case 34:return 79;
break;
case 35:return 4;
break;
}
},
rules: [/^(?:\s+)/,/^(?:program\b)/,/^(?:function\b)/,/^(?:;)/,/^(?::)/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:<)/,/^(?:>)/,/^(?:!)/,/^(?:=)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:,)/,/^(?:&)/,/^(?:\|)/,/^(?:var\b)/,/^(?:int\b)/,/^(?:float\b)/,/^(?:string\b)/,/^(?:boolean\b)/,/^(?:void\b)/,/^(?:write\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:while\b)/,/^(?:[0-9]*\.[0-9]+)/,/^(?:[0-9]+)/,/^(?:true|false\b)/,/^(?:([a-zA-Z][a-zA-Z0-9]*)(|_)*([a-zA-Z][a-zA-Z0-9]*)*)/,/^(?:"[^\"]*"|'[^\']*	)/,/^(?:$)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}