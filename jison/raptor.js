/* parser generated by jison 0.4.15 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[4,21],$V1=[2,7],$V2=[1,7],$V3=[1,8],$V4=[1,12],$V5=[1,11],$V6=[1,15],$V7=[1,16],$V8=[1,17],$V9=[1,18],$Va=[1,19],$Vb=[4,8,9,21,31,42,43,50,53],$Vc=[1,38],$Vd=[2,21],$Ve=[8,31,42,43,50,53],$Vf=[1,53],$Vg=[2,26],$Vh=[1,54],$Vi=[1,55],$Vj=[1,56],$Vk=[1,57],$Vl=[14,16,17,18,19,20,28],$Vm=[1,79],$Vn=[1,74],$Vo=[1,75],$Vp=[1,76],$Vq=[1,77],$Vr=[1,78],$Vs=[9,14,28],$Vt=[9,14,28,56,57],$Vu=[9,14,28,40,56,57,60,61,62,67,68],$Vv=[9,14,28,40,56,57,60,61,62,67,68,73,74],$Vw=[8,26,82,83,84,85],$Vx=[9,14,28,40,56,57,60,61,62],$Vy=[2,78];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"program":3,"EOF":4,"program_declaration":5,"program_block":6,"PROGRAM":7,"ID":8,";":9,"vars":10,"functions":11,"VAR":12,"var_declaration":13,",":14,"type":15,"INT":16,"FLOAT":17,"STRING":18,"BOOLEAN":19,"VOID":20,"FUNCTION":21,"funct":22,"function_declaration":23,"function_params":24,"function_block":25,"(":26,"vars_params":27,")":28,"{":29,"block":30,"}":31,"vars_params_declaration":32,"statutes":33,"statute":34,"assignment_statute":35,"write_statute":36,"if_statute":37,"while_statute":38,"return_statute":39,"=":40,"expression":41,"WRITE":42,"IF":43,"if_condition":44,"if_block":45,"else_statute":46,"else_declaration":47,"else_block":48,"ELSE":49,"WHILE":50,"while_condition":51,"while_block":52,"RETURN":53,"comparison":54,"logical_ops":55,"&":56,"|":57,"exp":58,"comparison_ops":59,"<":60,">":61,"!":62,"term":63,"exp_exit":64,"exp_validation":65,"sum_or_minus":66,"+":67,"-":68,"factor":69,"term_exit":70,"term_validation":71,"mult_or_divi":72,"*":73,"/":74,"constant":75,"id":76,"params":77,"add_closure":78,"find_proc":79,"params_input":80,"param_expression":81,"I":82,"F":83,"B":84,"S":85,"$accept":0,"$end":1},
terminals_: {2:"error",4:"EOF",7:"PROGRAM",8:"ID",9:";",12:"VAR",14:",",16:"INT",17:"FLOAT",18:"STRING",19:"BOOLEAN",20:"VOID",21:"FUNCTION",26:"(",28:")",29:"{",31:"}",40:"=",42:"WRITE",43:"IF",49:"ELSE",50:"WHILE",53:"RETURN",56:"&",57:"|",60:"<",61:">",62:"!",67:"+",68:"-",73:"*",74:"/",82:"I",83:"F",84:"B",85:"S"},
productions_: [0,[3,1],[3,2],[5,3],[6,2],[10,5],[10,3],[10,0],[13,2],[15,1],[15,1],[15,1],[15,1],[15,1],[11,3],[11,1],[22,3],[23,2],[24,3],[25,4],[27,2],[27,0],[32,2],[32,3],[30,1],[33,2],[33,0],[34,1],[34,1],[34,1],[34,1],[34,1],[35,4],[36,5],[37,4],[44,3],[45,3],[46,2],[46,0],[47,1],[48,3],[38,3],[51,3],[52,3],[39,3],[41,1],[41,3],[55,2],[55,2],[54,1],[54,3],[59,2],[59,2],[59,2],[59,2],[59,1],[59,1],[58,2],[64,3],[64,1],[65,0],[66,1],[66,1],[63,2],[70,3],[70,1],[71,0],[72,1],[72,1],[69,1],[69,2],[69,4],[76,1],[77,4],[77,0],[79,0],[80,1],[80,3],[80,0],[81,1],[78,0],[75,1],[75,1],[75,1],[75,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return null;
break;
case 3:

					var proc = new Proc("global", "void", dirProc(), [], [], null);
					yy.procs.push(proc);
					scope.push("global");
					yy.quads.push(["goto", null, null, null]);
					jumps.push(yy.quads.length - 1);
				
break;
case 8:

					var currentScope = scope.stackTop();
					var proc = findProc(yy, currentScope);
					var variable = {
						dir: assignMemory($$[$0-1], false, false),
						id: $$[$0],
						type: $$[$0-1]
					}
					proc.vars.push(variable);
				
break;
case 14:

					var main = findProc(yy, "main");
					if (main === "undefined")
						alert("Error no main.");
				
break;
case 17:

					var dir = dirProc();
					var proc = new Proc($$[$0], $$[$0-1], dir, [], [], yy.quads.length);
					yy.procs.push(proc);
					scope.push($$[$0]);

					if($$[$0] == "main")	{
						var jump = jumps.pop();
						yy.quads[jump][3] = yy.quads.length;
						yy.quads.push(["era", dir, null, null]);
					}
				
break;
case 19:

					if(scope.pop() == "main")
					 	return null;
				
break;
case 22: case 23:

					var currentScope = scope.stackTop();
					var proc = findProc(yy, currentScope);
					var variable = {
						dir: assignMemory($$[$0-1], false, false),
						id: $$[$0],
						type: $$[$0-1]
					}
					proc.vars.push(variable);
					proc.params.push($$[$0-1]);
				
break;
case 32:

					var var1 = ids.pop();
					var var1t = types.pop();
					var id = $$[$0-3];
					var idt = findTypeId(yy, id);
					if(var1t == idt || (var1t == "int" && idt == "float"))
						var op = yy.quads.push([$$[$0-2], findDir(yy, var1), null, findDir(yy, id)]);
					else
						alert("Error in semantics.");
				
break;
case 33:

					yy.quads.push(["write", null, null, findDir(yy, ids.pop())]);
				
break;
case 35:

					var type = types.pop();
					var id = ids.pop();
					if(type == "boolean") {
						yy.quads.push(["gotof", findDir(yy, id), null, null]);
						jumps.push(yy.quads.length - 1);
					} else {
						alert("Error!");
					}
				
break;
case 38: case 40: case 41:

					var jump = jumps.pop();
					yy.quads[jump][3] = yy.quads.length;
				
break;
case 39:

					var jump = jumps.pop();
					yy.quads.push(["goto", null, null, null]);
					yy.quads[jump][3] = yy.quads.length;
					jumps.push(yy.quads.length - 1);
				
break;
case 42:

					var type = types.pop();
					var id = ids.pop();
					if(type == "boolean") {
						yy.quads.push(["gotof", findDir(yy,id), null, null]);
						jumps.push(yy.quads.length - 1);
					} else {
						alert("Error!");
					}
				
break;
case 44:

					proc = findProc(yy, scope.stackTop());
					var id = ids.pop();
					var type = types.pop();
					if (proc.type != "void" && proc.type == type)	{
						yy.quads.push(["return", null, null, findDir(yy,id)]);
					} else {
						alert("Error!");
					}
				
break;
case 46: case 50:

					var var2 = ids.pop();
					var var2t = types.pop();
					var var1 = ids.pop();
					var var1t = types.pop();
					var op = ops.pop();
					var type = validateSem(op, var1t, var2t);
					if(type != "x")
						var op = [op, findDir(yy, var1), findDir(yy, var2), findDir(yy, createTemp(yy, type))];
					else
						alert("Error in semantics.");
					yy.quads.push(op);
				
break;
case 47:
ops.push("&&");
break;
case 48:
ops.push("||");
break;
case 51:
ops.push("<=");
break;
case 52:
ops.push(">=");
break;
case 53:
ops.push("!=");
break;
case 54:
ops.push("==");
break;
case 55:
ops.push(">");
break;
case 56:
ops.push("<");
break;
case 60:

					if (ops.stackTop() == "+" || ops.stackTop() == "-") {
						var var2 = ids.pop();
						var var2t = types.pop();
						var var1 = ids.pop();
						var var1t = types.pop();
						var op = ops.pop();
						var type = validateSem(op, var1t, var2t);
						if(type != "x")
							var op = [op, findDir(yy, var1), findDir(yy, var2), findDir(yy, createTemp(yy, type))];
						else
							alert("Error in semantics.");
						yy.quads.push(op);
					}
				
break;
case 61: case 62: case 67: case 68:
ops.push($$[$0]);
break;
case 66:

					if (ops.stackTop() == "*" || ops.stackTop() == "/") {
						var var2 = ids.pop();
						var var2t = types.pop();
						var var1 = ids.pop();
						var var1t = types.pop();
						var op = ops.pop();
						var type = validateSem(op, var1t, var2t);
						if(type != "x")
							var op = [op, findDir(yy, var1), findDir(yy, var2), findDir(yy, createTemp(yy, type))];
						else
							alert("Error in semantics.");;
						yy.quads.push(op);
					}
				
break;
case 71:
ops.pop();
break;
case 72:

					var proc = findProc(yy, $$[$0]);
					if(proc !== "undefined") {
						ids.push($$[$0]);
						types.push(proc.type);
						expectingParams = true;
					} else {
						ids.push($$[$0]);
						types.push(findTypeId(yy, $$[$0]));
						expectingParams = false;
					}
				
break;
case 73:

					if (paramTemp > tempProc.numParams() || paramTemp < tempProc.numParams())
						alert("Not the correct number of params");

					if (tempProc.type != "void") {
						var temp = createTemp(yy, tempProc.type);
						yy.quads.push(["gosub",tempProc.dir,null,findDir(yy,temp)]);
					} else {
						yy.quads.push(["gosub",tempProc.dir,null,null]);
					}

					ops.pop();
					tempProc = null;
					expectingParams = false;
				
break;
case 74:

					if(expectingParams)
						alert("Error expecting params");
				
break;
case 75:

						var id = ids.pop();
						tempProc = findProc(yy, id);
						yy.quads.push(["era",tempProc.dir,null,null]);
						types.pop();
						ops.push("|");
						paramTemp = 0;
				
break;
case 79:

					var id = ids.pop();
					var type = types.pop();
					if(tempProc.params[paramTemp] == type || (tempProc.params[paramTemp] == "float" && type == "int") )
						yy.quads.push(["param", findDir(yy, id), null, ++paramTemp]);
					else
						alert("Error in param");
					// ops.pop();
				
break;
case 80:
ops.push("|");
break;
case 81:

					yy.consts.push([parseInt($$[$0]), assignMemory("int", false, true)]);
					types.push("int");
					ids.push(parseInt($$[$0]));
				
break;
case 82:

					yy.consts.push([parseFloat($$[$0]), assignMemory("float", false, true)]);
					types.push("float");
					ids.push(parseFloat($$[$0]));
				
break;
case 83:

					yy.consts.push([$$[$0], assignMemory("boolean", false, true)]);
					types.push("boolean");
					ids.push($$[$0]);
				
break;
case 84:

					yy.consts.push([$$[$0], assignMemory("string", false, true)]);
					types.push("string");
					ids.push($$[$0]);
				
break;
}
},
table: [{3:1,4:[1,2],5:3,7:[1,4]},{1:[3]},{1:[2,1]},o($V0,$V1,{6:5,10:6,12:$V2,14:$V3}),{8:[1,9]},{1:[2,2]},{4:$V4,11:10,21:$V5},{13:13,15:14,16:$V6,17:$V7,18:$V8,19:$V9,20:$Va},{13:20,15:14,16:$V6,17:$V7,18:$V8,19:$V9,20:$Va},{9:[1,21]},{1:[2,4]},{15:24,16:$V6,17:$V7,18:$V8,19:$V9,20:$Va,22:22,23:23},{1:[2,15]},{9:$V1,10:25,12:$V2,14:$V3},{8:[1,26]},{8:[2,9]},{8:[2,10]},{8:[2,11]},{8:[2,12]},{8:[2,13]},o($Vb,$V1,{10:27,12:$V2,14:$V3}),o([4,12,14,21],[2,3]),{4:$V4,11:28,21:$V5},{24:29,26:[1,30]},{8:[1,31]},{9:[1,32]},o([4,8,9,12,14,21,31,42,43,50,53],[2,8]),o($Vb,[2,6]),{1:[2,14]},{25:33,29:[1,34]},{14:$Vc,15:37,16:$V6,17:$V7,18:$V8,19:$V9,20:$Va,27:35,28:$Vd,32:36},{26:[2,17]},o($Vb,$V1,{10:39,12:$V2,14:$V3}),o($V0,[2,16]),o($Ve,$V1,{10:40,12:$V2,14:$V3}),{28:[1,41]},{14:$Vc,15:37,16:$V6,17:$V7,18:$V8,19:$V9,20:$Va,27:42,28:$Vd,32:36},{8:[1,43]},{15:44,16:$V6,17:$V7,18:$V8,19:$V9,20:$Va},o($Vb,[2,5]),{8:$Vf,30:45,31:$Vg,33:46,34:47,35:48,36:49,37:50,38:51,39:52,42:$Vh,43:$Vi,50:$Vj,53:$Vk},{29:[2,18]},{28:[2,20]},o($Vl,[2,22]),{8:[1,58]},{31:[1,59]},{31:[2,24]},{8:$Vf,31:$Vg,33:60,34:47,35:48,36:49,37:50,38:51,39:52,42:$Vh,43:$Vi,50:$Vj,53:$Vk},o($Ve,[2,27]),o($Ve,[2,28]),o($Ve,[2,29]),o($Ve,[2,30]),o($Ve,[2,31]),{40:[1,61]},{26:[1,62]},{26:[1,64],44:63},{26:[1,66],51:65},{8:$Vm,26:$Vn,41:67,54:68,58:69,63:70,69:71,75:72,76:73,82:$Vo,83:$Vp,84:$Vq,85:$Vr},o($Vl,[2,23]),o($V0,[2,19]),{31:[2,25]},{8:$Vm,26:$Vn,41:80,54:68,58:69,63:70,69:71,75:72,76:73,82:$Vo,83:$Vp,84:$Vq,85:$Vr},{8:$Vm,26:$Vn,41:81,54:68,58:69,63:70,69:71,75:72,76:73,82:$Vo,83:$Vp,84:$Vq,85:$Vr},{29:[1,83],45:82},{8:$Vm,26:$Vn,41:84,54:68,58:69,63:70,69:71,75:72,76:73,82:$Vo,83:$Vp,84:$Vq,85:$Vr},{29:[1,86],52:85},{8:$Vm,26:$Vn,41:87,54:68,58:69,63:70,69:71,75:72,76:73,82:$Vo,83:$Vp,84:$Vq,85:$Vr},{9:[1,88]},o($Vs,[2,45],{55:89,56:[1,90],57:[1,91]}),o($Vt,[2,49],{59:92,40:[1,96],60:[1,93],61:[1,94],62:[1,95]}),o($Vu,[2,60],{64:97,65:98}),o($Vv,[2,66],{70:99,71:100}),o($Vv,[2,69]),o($Vv,[2,74],{77:101,26:[1,102]}),o($Vw,[2,80],{78:103}),o($Vv,[2,81]),o($Vv,[2,82]),o($Vv,[2,83]),o($Vv,[2,84]),o([9,14,26,28,40,56,57,60,61,62,67,68,73,74],[2,72]),{9:[1,104]},{28:[1,105]},o($Ve,[2,38],{46:106,47:107,49:[1,108]}),{8:$Vf,30:109,31:$Vg,33:46,34:47,35:48,36:49,37:50,38:51,39:52,42:$Vh,43:$Vi,50:$Vj,53:$Vk},{28:[1,110]},o($Ve,[2,41]),{8:$Vf,30:111,31:$Vg,33:46,34:47,35:48,36:49,37:50,38:51,39:52,42:$Vh,43:$Vi,50:$Vj,53:$Vk},{28:[1,112]},o($Ve,[2,44]),{8:$Vm,26:$Vn,54:113,58:69,63:70,69:71,75:72,76:73,82:$Vo,83:$Vp,84:$Vq,85:$Vr},{56:[1,114]},{57:[1,115]},{8:$Vm,26:$Vn,58:116,63:70,69:71,75:72,76:73,82:$Vo,83:$Vp,84:$Vq,85:$Vr},o($Vw,[2,56],{40:[1,117]}),o($Vw,[2,55],{40:[1,118]}),{40:[1,119]},{40:[1,120]},o($Vx,[2,57]),o($Vx,[2,59],{66:121,67:[1,122],68:[1,123]}),o($Vu,[2,63]),o($Vu,[2,65],{72:124,73:[1,125],74:[1,126]}),o($Vv,[2,70]),o([8,26,28,82,83,84,85],[2,75],{79:127}),{8:$Vm,26:$Vn,41:128,54:68,58:69,63:70,69:71,75:72,76:73,82:$Vo,83:$Vp,84:$Vq,85:$Vr},o($Ve,[2,32]),{9:[1,129]},o($Ve,[2,34]),{29:[1,131],48:130},{29:[2,39]},{31:[1,132]},{29:[2,35]},{31:[1,133]},{29:[2,42]},o($Vs,[2,46]),o($Vw,[2,47]),o($Vw,[2,48]),o($Vt,[2,50]),o($Vw,[2,51]),o($Vw,[2,52]),o($Vw,[2,53]),o($Vw,[2,54]),{8:$Vm,26:$Vn,58:134,63:70,69:71,75:72,76:73,82:$Vo,83:$Vp,84:$Vq,85:$Vr},o($Vw,[2,61]),o($Vw,[2,62]),{8:$Vm,26:$Vn,63:135,69:71,75:72,76:73,82:$Vo,83:$Vp,84:$Vq,85:$Vr},o($Vw,[2,67]),o($Vw,[2,68]),{8:$Vm,26:$Vn,28:$Vy,41:138,54:68,58:69,63:70,69:71,75:72,76:73,80:136,81:137,82:$Vo,83:$Vp,84:$Vq,85:$Vr},{28:[1,139]},o($Ve,[2,33]),o($Ve,[2,37]),{8:$Vf,30:140,31:$Vg,33:46,34:47,35:48,36:49,37:50,38:51,39:52,42:$Vh,43:$Vi,50:$Vj,53:$Vk},o([8,31,42,43,49,50,53],[2,36]),o($Ve,[2,43]),o($Vx,[2,58]),o($Vu,[2,64]),{28:[1,141]},{14:[1,142],28:[2,76]},o([14,28],[2,79]),o($Vv,[2,71]),{31:[1,143]},o($Vv,[2,73]),{8:$Vm,26:$Vn,28:$Vy,41:138,54:68,58:69,63:70,69:71,75:72,76:73,80:144,81:137,82:$Vo,83:$Vp,84:$Vq,85:$Vr},o($Ve,[2,40]),{28:[2,77]}],
defaultActions: {2:[2,1],5:[2,2],10:[2,4],12:[2,15],15:[2,9],16:[2,10],17:[2,11],18:[2,12],19:[2,13],28:[2,14],31:[2,17],41:[2,18],42:[2,20],46:[2,24],60:[2,25],108:[2,39],110:[2,35],112:[2,42],144:[2,77]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        function lex() {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};


var dirProcs;

var gv_i;
var gv_f;
var gv_st;
var gv_bool;

var lv_i;
var lv_f;
var lv_st;
var lv_bool;

var tv_i;
var tv_f;
var tv_st;
var tv_bool;

var cv_i;
var cv_f;
var cv_st;
var cv_bool;

initDirs();

var dataStructures = {
    stack : function() {
        var elements = [];

        this.push = function(element) {
            elements.push(element);
        }
        this.pop = function() {
            return elements.pop();
        }
        this.stackTop = function(element) {
            return elements[elements.length - 1];
        }
    }
}

var ids = new dataStructures.stack();
var types = new dataStructures.stack();
var ops = new dataStructures.stack();
var scope = new dataStructures.stack();
var jumps = new dataStructures.stack()

var semanticCube = [
											["v",	"v",	"+",	"-",	"/",	"*",	"==",	"<",	"<=",	">",	">=",	"&&",	"||", "!="],
										 	["int",	"int", 	"int", 	"int", 	"int", 	"int", 	"boolean", 	"boolean", 	"boolean", 	"boolean", 	"boolean", 	"x", 	"x", "boolean"],
											["float", "float", 	"float", 	"float", 	"float", 	"float", 	"b", 	"b", 	"b", 	"b", 	"b", 	"x", 	"x", "boolean"],
											["string", "string", 	"string", 	"x", 	"x", 	"x", 	"x", 	"x", 	"x", 	"x", 	"x", 	"x", 	"x", "x"],
											["boolean", "boolean", 	"x", 	"x", 	"x", 	"x", 	"boolean", 	"x", 	"x", 	"x", 	"x", 	"boolean", 	"boolean", "boolean"],
											["int", "float", 	"float", 	"float", 	"float", 	"float", 	"boolean", 	"boolean", 	"boolean", 	"boolean", 	"boolean", 	"x", 	"x", "boolean"],
											["int", "string", 	"x", 	"x", 	"x", 	"x", 	"x", 	"x", 	"x", 	"x", 	"x", 	"x", 	"x", "x"],
											["int", "boolean", 	"x", 	"x", 	"x", 	"x", 	"x", 	"x", 	"x", 	"x", 	"x", 	"x", 	"x", "x"],
											["float", "int", 	"float", 	"float", 	"float", 	"float", 	"boolean", 	"boolean", 	"boolean", 	"boolean", 	"boolean", 	"x", 	"x", "boolean"],
											["float", "string", 	"x", 	"x", 	"x", 	"x", 	"x", 	"x", 	"x", 	"x", 	"x", 	"x", 	"x", "x"],
											["float", "boolean", 	"x", 	"x", 	"x", 	"x", 	"x", 	"x", 	"x", 	"x", 	"x", 	"x", 	"x", "x"],
											["string", "int", 	"x", 	"x", 	"x", 	"x", 	"x", 	"x", 	"x", 	"x", 	"x", 	"x", 	"x", "x"],
											["string", "float", 	"x", 	"x", 	"x", 	"x", 	"x", 	"x", 	"x", 	"x", 	"x", 	"x", 	"x", "x"],
											["string", "boolean", 	"boolean", 	"x", 	"x", 	"x", 	"x", 	"x", 	"x", 	"x", 	"x", 	"x", 	"x", "x"],
											["boolean", "int", 	"x", 	"x", 	"x", 	"x", 	"x", 	"x", 	"x", 	"x", 	"x", 	"x", 	"x", "x"],
											["boolean", "float", 	"x", 	"x", 	"x", 	"x", 	"x", 	"x", 	"x", 	"x", 	"x", 	"x", 	"x", "x"],
											["boolean", "string", 	"x", 	"x", 	"x", 	"x", 	"x", 	"x", 	"x", 	"x", 	"x", 	"x", 	"x", "x"],
										];

var temp = 1;
var paramTemp = 1;
var tempProc = null;
var expectingParams = false;

var Raptor = function() {
	var raptorLexer = function () {};
	raptorLexer.prototype = parser.lexer;

	var raptorParser = function () {
		this.lexer = new raptorLexer();
		this.yy = {
			procs: [],
			quads: [],
			consts: []
			// parseError: function(msg, hash) {
			// 	this.done = true;
			// 	var result = new String();
			// 	result.html = '<pre>' + msg + '</pre>';
			// 	result.hash = hash;
			// 	return result;
			// }
		};
	};
	raptorParser.prototype = parser;
	var newParser = new raptorParser();
	return newParser;
};

function Proc(name, type, dir, params, vars, init){
	this.name = name;
	this.type = type;
	this.dir = dir;
	this.params = params;
	this.vars = vars;
	this.init = init;
};

Proc.prototype = {
	size : function() {
		var int = 0; var float = 0; var string = 0; var boolean = 0;
		var int_t = 0; var float_t = 0; var string_t = 0; var boolean_t = 0;
		for(var i = 0; i < this.vars.length; i++) {
			if(this.vars[i].id.indexOf("tmp__") > -1) {
				switch(this.vars[i].type) {
					case 'int':
						int_t++;
						break;
					case 'float':
						float_t++;
						break;
					case 'string':
						string_t++;
						break;
					case 'boolean':
						boolean_t++;
						break;
				}
			} else {
				switch(this.vars[i].type) {
					case 'int':
						int++;
						break;
					case 'float':
						float++;
						break;
					case 'string':
						string++;
						break;
					case 'boolean':
						boolean++;
						break;
				}
			}
		}

		return [int, float, string, boolean, int_t, float_t, string_t, boolean_t];
	},
	dirs : function() {
		var int = 0; var float = 0; var string = 0; var boolean = 0;
		var int_t = 0; var float_t = 0; var string_t = 0; var boolean_t = 0;
		for(var i = 0; i < this.vars.length; i++) {
			if(this.vars[i].id.indexOf("tmp__") > -1) {
				switch(this.vars[i].type) {
					case 'int':
						if(int_t == 0)
							int_t = this.vars[i].dir;
						break;
					case 'float':
						if(float_t == 0)
							float_t = this.vars[i].dir;
						break;
					case 'string':
						if(string_t == 0)
							string_t = this.vars[i].dir;
						break;
					case 'boolean':
						if(boolean_t == 0)
							boolean_t = this.vars[i].dir;
						break;
				}
			} else {
				switch(this.vars[i].type) {
					case 'int':
						if(int == 0)
							int = this.vars[i].dir;
						break;
					case 'float':
						if(float == 0)
							float = this.vars[i].dir;
						break;
					case 'string':
						if(string == 0)
							string = this.vars[i].dir;
						break;
					case 'boolean':
						if(boolean == 0)
							boolean = this.vars[i].dir;
						break;
				}
			}
		}
		return [int, float, string, boolean, int_t, float_t, string_t, boolean_t];
	},
	numParams : function() {
		return this.params.length;
	}
}

function dirProc() {
	if(dirProcs < 5000)
		return dirProcs++;
	else
		alert("Out of memory.");
}

function assignMemory(type, tmp, cons) {

	var isGlobal = false;
	if (scope.stackTop() == "global") {
		isGlobal = true;
	}

	if (tmp) {
		switch(type) {
			case 'int':
				if (tv_i < 21000) {
					return tv_i++;
				} else {
					alert("Out of memory!");
				}
				break;
			case 'float':
				if (tv_f < 23000) {
					return tv_f++;
				} else {
					alert("Out of memory!");
				}
				break;
			case 'string':
				if (tv_st < 25000) {
					return tv_st++;
				} else {
					alert("Out of memory!");
				}
				break;
			case 'boolean':
				if (tv_bool < 26000) {
					return tv_bool++;
				} else {
					alert("Out of memory!");
				}
				break;
		}
	} else if (cons) {
		switch(type) {
			case 'int':
				if (cv_i < 28000) {
					return cv_i++;
				} else {
					alert("Out of memory!");
				}
				break;
			case 'float':
				if (cv_f < 30000) {
					return cv_f++;
				} else {
					alert("Out of memory!");
				}
				break;
			case 'string':
				if (cv_st < 32000) {
					return cv_st++;
				} else {
					alert("Out of memory!");
				}
				break;
			case 'boolean':
				if (cv_bool < 33000) {
					return cv_bool++;
				} else {
					alert("Out of memory!");
				}
				break;
		}
	} else {
		if(isGlobal) {
			switch(type) {
				case 'int':
					if (gv_i < 7000) {
						return gv_i++;
					} else {
						alert("Out of memory!");
					}
					break;
				case 'float':
					if (gv_f < 9000) {
						return gv_f++;
					} else {
						alert("Out of memory!");
					}
					break;
				case 'string':
					if (gv_st < 11000) {
						return gv_st++;
					} else {
						alert("Out of memory!");
					}
					break;
				case 'boolean':
					if (gv_bool < 12000) {
						return gv_bool++;
					} else {
						alert("Out of memory!");
					}
					break;
			}
		} else {
			switch(type) {
				case 'int':
					if (lv_i < 14000) {
						return lv_i++;
					} else {
						alert("Out of memory!");
					}
					break;
				case 'float':
					if (lv_f < 16000) {
						return lv_f++;
					} else {
						alert("Out of memory!");
					}
					break;
				case 'string':
					if (lv_st < 18000) {
						return lv_st++;
					} else {
						alert("Out of memory!");
					}
					break;
				case 'boolean':
					if (lv_bool < 19000) {
						return lv_bool++;
					} else {
						alert("Out of memory!");
					}
					break;
			}
		}
	}
}

function initDirs() {
	dirProcs = 2000;

	gv_i = 5000;
	gv_f = 7000;
	gv_st = 9000;
	gv_bool = 11000;

	lv_i = 12000;
	lv_f = 14000;
	lv_st = 16000;
	lv_bool = 18000;

	tv_i = 19000;
	tv_f = 21000;
	tv_st = 23000;
	tv_bool = 25000;

	cv_i = 26000;
	cv_f = 28000;
	cv_st = 30000;
	cv_bool = 32000;
}

function validateSem(op, var1, var2) {
		for (var i = 0; i < semanticCube.length; i++) {
			if(semanticCube[i][0] == var1 && semanticCube[i][1] == var2) {
				for (var j = 0; j < semanticCube[0].length; j++) {
					if(semanticCube[0][j] == op)
						return semanticCube[i][j];
				}
			}
		}
}

function findTypeId(yy, id) {
	// for(var i = 0; i < yy.procs.length; i++) {
	// 	if(id == yy.procs[i].name) {
	// 		yy.quads.push(["era", id,null,null]);
	// 		return yy.procs[i].type;
	// 	}
	// }

	var currentScope = scope.stackTop();
	var proc = findProc(yy, currentScope);

	for(var i = 0; i < proc.vars.length; i++)
		if(proc.vars[i].id == id)
			return proc.vars[i].type;

	proc = findProc(yy, "global");
	for(var i = 0; i < proc.vars.length; i++)
		if(proc.vars[i].id == id)
			return proc.vars[i].type;

	alert("ID not declared.");
}

function findProc(yy, name) {
	for (var i = 0; i < yy.procs.length; i++) {
		if (yy.procs[i].name == name)
			return yy.procs[i];
	}

	return "undefined";
}

function createTemp(yy, type) {
	var currentScope = scope.stackTop();
	var proc = findProc(yy, currentScope);

	var tmp = {
		dir: assignMemory(type, true, false),
		id: "tmp__"+temp,
		type: type
	}

	ids.push(tmp.id);
	types.push(tmp.type);
	temp++;

	proc.vars.push(tmp);

	return tmp.id;
}

function findDir(yy, id) {
	// return id;
	var currentScope = scope.stackTop();
	var proc = findProc(yy, currentScope);

	for(var i = 0; i < proc.vars.length; i++)
		if(proc.vars[i].id == id)
			return proc.vars[i].dir;

	proc = findProc(yy, "global");
	for(var i = 0; i < proc.vars.length; i++)
		if(proc.vars[i].id == id)
			return proc.vars[i].dir;

	for(var i = 0; i < yy.consts.length; i++)
		if(yy.consts[i][0] == id)
			return yy.consts[i][1];

	alert("ID not declared.");
	return "undefined";
}

if (typeof(window) !== 'undefined') {
	window.Raptor = Raptor;
} else {
	parser.Raptor = Raptor;
}
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* ignore whitespace */;
break;
case 1:return 7;
break;
case 2:return 21;
break;
case 3:return 9;
break;
case 4:return ':';
break;
case 5:return 29;
break;
case 6:return 31;
break;
case 7:return 26;
break;
case 8:return 28;
break;
case 9:return 60;
break;
case 10:return 61;
break;
case 11:return 62;
break;
case 12:return "=";
break;
case 13:return "+";
break;
case 14:return "-";
break;
case 15:return 73;
break;
case 16:return 74;
break;
case 17:return 14;
break;
case 18:return 56;
break;
case 19:return "|";
break;
case 20:return 12;
break;
case 21:return 16;
break;
case 22:return 17;
break;
case 23:return 18;
break;
case 24:return 19;
break;
case 25:return 20;
break;
case 26:return 42;
break;
case 27:return 43;
break;
case 28:return 49;
break;
case 29:return 50;
break;
case 30:return 53;
break;
case 31:return 83;
break;
case 32:return 82;
break;
case 33:return 84;
break;
case 34:return 8;
break;
case 35:return 85;
break;
case 36:return 4;
break;
}
},
rules: [/^(?:\s+)/,/^(?:program\b)/,/^(?:function\b)/,/^(?:;)/,/^(?::)/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:<)/,/^(?:>)/,/^(?:!)/,/^(?:=)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:,)/,/^(?:&)/,/^(?:\|)/,/^(?:var\b)/,/^(?:int\b)/,/^(?:float\b)/,/^(?:string\b)/,/^(?:boolean\b)/,/^(?:void\b)/,/^(?:write\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:while\b)/,/^(?:return\b)/,/^(?:[0-9]*\.[0-9]+)/,/^(?:[0-9]+)/,/^(?:true|false\b)/,/^(?:([a-zA-Z][a-zA-Z0-9]*)(|_)*([a-zA-Z][a-zA-Z0-9]*)*)/,/^(?:"[^\"]*"|'[^\']*	)/,/^(?:$)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}