/* parser generated by jison 0.4.15 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[4,25],$V1=[2,7],$V2=[1,7],$V3=[1,8],$V4=[1,12],$V5=[1,11],$V6=[1,15],$V7=[1,16],$V8=[1,17],$V9=[1,18],$Va=[1,19],$Vb=[4,8,9,18,25,30,35,45,49,50,60,61,95,96,97],$Vc=[4,8,9,12,14,18,25,30,35,45,49,50,60,61,95,96,97],$Vd=[2,11],$Ve=[1,34],$Vf=[1,40],$Vg=[2,24],$Vh=[8,18,30,35,45,49,50,60,61,95,96,97],$Vi=[1,76],$Vj=[1,72],$Vk=[1,71],$Vl=[2,29],$Vm=[1,58],$Vn=[1,59],$Vo=[1,60],$Vp=[1,64],$Vq=[1,62],$Vr=[1,73],$Vs=[1,74],$Vt=[1,75],$Vu=[14,20,21,22,23,24,32],$Vv=[4,8,9,12,14,18,20,21,22,23,24,25,30,32,35,45,49,50,60,61,95,96,97],$Vw=[9,14,19,32],$Vx=[9,14,19,32,64,65],$Vy=[9,14,19,32,46,64,65,68,69,70,75,76],$Vz=[9,14,19,32,46,64,65,68,69,70,75,76,81,82],$VA=[8,18,30,95,96,97],$VB=[2,95],$VC=[9,14,19,32,46,64,65,68,69,70],$VD=[2,89],$VE=[2,96];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"program":3,"EOF":4,"program_declaration":5,"program_block":6,"PROGRAM":7,"ID":8,";":9,"vars":10,"functions":11,"VAR":12,"var_declaration":13,",":14,"type":15,"var_array":16,"[":17,"I":18,"]":19,"INT":20,"FLOAT":21,"STRING":22,"BOOLEAN":23,"VOID":24,"FUNCTION":25,"funct":26,"function_declaration":27,"function_params":28,"function_block":29,"(":30,"vars_params":31,")":32,"{":33,"block":34,"}":35,"vars_params_declaration":36,"statutes":37,"statute":38,"assignment_statute":39,"write_statute":40,"if_statute":41,"while_statute":42,"return_statute":43,"expression_statute":44,"ASSIGN":45,"=":46,"expression":47,"assignment_declaration":48,"WRITE":49,"IF":50,"if_condition":51,"if_block":52,"else_statute":53,"else_declaration":54,"else_block":55,"ELSE":56,"while_declaration":57,"while_condition":58,"while_block":59,"WHILE":60,"RETURN":61,"comparison":62,"logical_ops":63,"&":64,"|":65,"exp":66,"comparison_ops":67,"<":68,">":69,"!":70,"term":71,"exp_exit":72,"exp_validation":73,"sum_or_minus":74,"+":75,"-":76,"factor":77,"term_exit":78,"term_validation":79,"mult_or_divi":80,"*":81,"/":82,"constant":83,"id":84,"options":85,"add_closure":86,"end_closure":87,"params":88,"array":89,"find_proc":90,"params_input":91,"param_expression":92,"vector":93,"matrix":94,"F":95,"B":96,"S":97,"$accept":0,"$end":1},
terminals_: {2:"error",4:"EOF",7:"PROGRAM",8:"ID",9:";",12:"VAR",14:",",17:"[",18:"I",19:"]",20:"INT",21:"FLOAT",22:"STRING",23:"BOOLEAN",24:"VOID",25:"FUNCTION",30:"(",32:")",33:"{",35:"}",45:"ASSIGN",46:"=",49:"WRITE",50:"IF",56:"ELSE",60:"WHILE",61:"RETURN",64:"&",65:"|",68:"<",69:">",70:"!",75:"+",76:"-",81:"*",82:"/",95:"F",96:"B",97:"S"},
productions_: [0,[3,1],[3,2],[5,3],[6,2],[10,5],[10,3],[10,0],[13,3],[16,3],[16,6],[16,0],[15,1],[15,1],[15,1],[15,1],[15,1],[11,3],[11,1],[26,3],[27,2],[28,3],[29,4],[31,2],[31,0],[36,3],[36,4],[34,1],[37,2],[37,0],[38,1],[38,1],[38,1],[38,1],[38,1],[38,1],[39,5],[39,8],[39,11],[48,2],[40,5],[41,4],[51,3],[52,3],[53,2],[53,0],[54,1],[55,3],[42,3],[57,1],[58,3],[59,3],[43,3],[44,2],[47,1],[47,3],[63,2],[63,2],[62,1],[62,3],[67,2],[67,2],[67,2],[67,2],[67,1],[67,1],[66,2],[72,3],[72,1],[73,0],[74,1],[74,1],[71,2],[78,3],[78,1],[79,0],[80,1],[80,1],[77,1],[77,2],[77,5],[84,1],[85,1],[85,1],[85,0],[88,4],[90,0],[91,1],[91,3],[91,0],[92,1],[89,1],[89,1],[93,5],[94,10],[86,0],[87,0],[83,1],[83,1],[83,1],[83,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return null;
break;
case 3:

					var proc = new Proc("global", "void", dirProc(), [], [], null); // Creates global proc
					yy.procs.push(proc); // Pushes scope to procs
					scope.push("global"); // Makes global current scope
					yy.quads.push(["goto", null, null, null]); // Expects goto main
					jumps.push(yy.quads.length - 1); // Expects main return
				
break;
case 8:

					var currentScope = scope.stackTop(); // Looks for scope (global, main, function1..)
					var proc = findProc(yy, currentScope); // Finds current process
					var variable = {
						dir: assignMemory($$[$0-2], false, false, $$[$0]), // Assigns memory depending on type and if is an array
						id: $$[$0-1],
						type: $$[$0-2],
						dim: $$[$0] // Array with dimensions of array or empty
					}
					proc.vars.push(variable); // Pushes to process
				
break;
case 9:

				yy.consts.push([parseInt($$[$0-1]), assignMemory("int", false, true, [])]); // Adds I to constants

				// Pushes I to stacks
				types.push("int");
				ids.push(parseInt($$[$0-1]));

				this.$ = [$$[$0-1]]; // Returns an array with I for var_declaration
			
break;
case 10:

				yy.consts.push([parseInt($$[$0-4]), assignMemory("int", false, true, [])]); // Adds I to constants
				// Pushes I to stacks
				types.push("int");
				ids.push(parseInt($$[$0-4])); // Returns an array with I for var_declaration

				yy.consts.push([parseInt($$[$0-1]), assignMemory("int", false, true, [])]); // Adds I to constants
				// Pushes I to stacks
				types.push("int");
				ids.push(parseInt($$[$0-1])); // Returns an array with I for var_declaration
				this.$ = [$$[$0-4],$$[$0-1]];
			
break;
case 11:

				this.$ = []; // Returns an empty array
			
break;
case 17:

					// After the creation of all functions, if no main was declared, return error.
					var main = findProc(yy, "main");
					if (main === "undefined") {
						throw new Error("NO MAIN DECLARED.");
					}
				
break;
case 19:

					// Functions always generate a return unless main
					if (scope.stackTop().id !== "main") { // Scope is a stack with functions
						yy.quads.push(["return", null, null, null]);
					}
				
break;
case 20:

					var dir = dirProc(); // Returns the next avaiable Proc dir
					var proc = new Proc($$[$0], $$[$0-1], dir, [], [], yy.quads.length); // Created a new Process with ID, type, and dir
					yy.procs.push(proc); // Pushes to procs array
					scope.push($$[$0]); // Pushes to scope stack

					// If id == main, returns the position of the quads for the initial goto
					if ($$[$0] === "main")	{
						var jump = jumps.pop();
						yy.quads[jump][3] = yy.quads.length;
					}
				
break;
case 22:

					// Main must be the last declared function. No other function will run after main.
					if (scope.pop() === "main") {
						return null;
					}
				
break;
case 25:

					var currentScope = scope.stackTop(); // Looks for scope (global, main, function1..)
					var proc = findProc(yy, currentScope); // Finds current process
					var variable = {
						dir: assignMemory($$[$0-2], false, false, $$[$0]), // Assigns memory depending on type and if is an array
						id: $$[$0-1],
						type: $$[$0-2],
						dim: $$[$0] // Array with dimensions of array or empty
					}
					proc.vars.push(variable); // Pushes to process vars
					proc.params.push(variable); // Pushes to params to know it is a param
				
break;
case 26:

					var currentScope = scope.stackTop(); // Looks for scope (global, main, function1..)
					var proc = findProc(yy, currentScope); // Finds current process
					var variable = {
						dir: assignMemory($$[$0-2], false, false, $$[$0]), // Assigns memory depending on type and if is an array
						id: $$[$0-1],
						type: $$[$0-2],
						dim: $$[$0]  // Array with dimensions of array or empty
					}
					proc.vars.push(variable); // Pushes to process vars
					proc.params.push(variable); // Pushes to params to know it is a param
				
break;
case 36:

					var var1 = ids.pop(); // Pops from stack expression id
					var var1t = types.pop(); // Pops from stack expression type
					var id = $$[$0-3]; // ID
					var idt = findTypeId(yy, $$[$0-3]); //Type of ID
					if (var1t === idt || (var1t === "int" && idt === "float")) { // If equals types or int && float
						var op = yy.quads.push([$$[$0-2], findDir(yy, var1), null, findDir(yy, id)]); // Creates quad and finds the dir of each of the vars
					} else {
						throw new Error("INCOMPATIBLE TYPES");
					}
				
break;
case 37:

					var var1 = ids.pop(); // Pops from stack second expression id
					var var1t = types.pop(); // Pops from stack second expression type
					var var2 = ids.pop(); // Pops from stack first expression id
					var var2t = types.pop(); // Pops from stack first expression type
					var id = $$[$0-6]; // ID
					var idt = findTypeId(yy, $$[$0-6]); // Type of ID

					var dims = findDim(yy, id); // Returns the dimension of ID
					if (dims.length != 1) { // If Not ID[]
						throw new Error("INCORRECT ARRAY DIMENSION")
					}

					if (var2t != "int") { // Type of the first expression must be int
						throw new Error("ARRAY POINTERS ONLY HANDLE INTS");
					}

					yy.quads.push(["verify", findDir(yy, var2), 0, dims[0]-1]); // Adds verify to quads with dir of vars, and the limit from 0 to dim[0]
					yy.quads.push(["++", findDir(yy, id), findDir(yy, var2), "(" + findDir(yy, createTemp(yy, idt)) + ")"]); // DirBase + S1

					var pointer = ids.pop(); types.pop();

					if (var1t === idt || (var1t === "int" && idt === "float")) {
						var op = yy.quads.push([$$[$0-2], findDir(yy, var1), null, findDir(yy, pointer)]); // Assign
					} else {
						throw new Error("INCOMPATIBLE TYPES");
					}
				
break;
case 38:

					var var1 = ids.pop(); // Pops from stack third expression id
					var var1t = types.pop();// Pops from stack third expression type
					var var2 = ids.pop(); // Pops from stack second expression id
					var var2t = types.pop(); // Pops from stack second expression type
					var var3 = ids.pop(); // Pops from stack first expression id
					var var3t = types.pop(); // Pops from stack first expression type
					var id = $$[$0-9]; // ID
					var idt = findTypeId(yy, $$[$0-9]); // Type of ID

					var dims = findDim(yy, id); // Returns the dimension of ID
					if (dims.length != 2) { // If Not ID[][]
						throw new Error("INCORRECT ARRAY DIMENSION")
					}

					if (var2t != "int") { // Type of the second expression must be int
						throw new Error("ARRAY POINTERS ONLY HANDLE INTS");
					}

					yy.quads.push(["verify", findDir(yy, var3), 0, dims[0]-1]); // Adds verify to quads with dir of vars, and the limit from 0 to dim[0]
					yy.quads.push(["*", findDir(yy, var3), findDir(yy, parseInt(dims[0])), findDir(yy, createTemp(yy, var3t))]); // m1 * s1

					var multpointer = ids.pop();
					var multpointertype = types.pop();

					yy.quads.push(["verify", findDir(yy, var2), 0, dims[1]-1]); // Adds verify to quads with dir of vars, and the limit from 0 to dim[1]
					yy.quads.push(["+", findDir(yy, multpointer), findDir(yy, var2), findDir(yy, createTemp(yy, multpointertype))]); // (m1 * s1) + s2

					var sumpointer = ids.pop();
					var sumpointertype = types.pop();

					yy.quads.push(["++", findDir(yy, id), findDir(yy, sumpointer), "(" + findDir(yy, createTemp(yy, idt)) + ")"]); // DirBase + S

					var pointer = ids.pop(); types.pop();

					if (var1t === idt || (var1t === "int" && idt === "float")) {
						var op = yy.quads.push([$$[$0-2], findDir(yy, var1), null, findDir(yy, pointer)]); // Assign
					} else {
						throw new Error("INCOMPATIBLE TYPES");
					}
				
break;
case 39:

					ids.push($$[$0]); // Pushes ID to stack
					types.push(findTypeId(yy, $$[$0])); // Pushes type to stack
				
break;
case 40:

					yy.quads.push(["write", null, null, findDir(yy, ids.pop())]); // Quad that prints the ID in dir
				
break;
case 42:

					var type = types.pop(); // Pops from stack
					var id = ids.pop(); // Pops from stack
					if (type === "boolean") { // Verify expression is boolean
						yy.quads.push(["gotof", findDir(yy, id), null, null]); // GotoF
						jumps.push(yy.quads.length - 1); // Adds position to jump stack
					} else {
						throw new Error("INVALID IF STATEMENT");
					}
				
break;
case 45: case 48:

					var jump = jumps.pop(); // Pops from stack
					yy.quads[jump][3] = yy.quads.length; // Adds position to jump value
				
break;
case 46:

					var jump = jumps.pop(); // Pops from stack
					yy.quads.push(["goto", null, null, null]);
					yy.quads[jump][3] = yy.quads.length; // Adds position to jump value
					jumps.push(yy.quads.length - 1);
				
break;
case 47:

					var jump = jumps.pop(); // Pops from stack
					yy.quads[jump][3] = yy.quads.length;  // Adds position to jump value
				
break;
case 49:

					jumps.push(yy.quads.length);
				
break;
case 50:

					var type = types.pop();
					var id = ids.pop();
					if(type === "boolean") {
						yy.quads.push(["gotof", findDir(yy,id), null, null]);
						jumps.push(yy.quads.length - 1);
					} else {
						throw new Error("INVALID WHILE STATEMENT");
					}
				
break;
case 51:

					var jump = jumps.pop(); // Pops from stack
					yy.quads.push(["goto",null,null,jumps.pop()]); //Goto quad jump value
					jumps.push(jump); // Readds jump to stack
				
break;
case 52:

					proc = findProc(yy, scope.stackTop()); // Find proc being used (first in stack)
					var id = ids.pop(); // Pop from stack
					var type = types.pop(); // Pop from stack
					if (proc.type !== "void" && proc.type === type)	{ // If not void and if equal types
						yy.quads.push(["return", null, null, findDir(yy,id)]); // Return the result of te function to the dir of the id
					} else {
						throw new Error("EXPECTED RETURN");
					}
				
break;
case 55:

					var var2 = ids.pop(); // Pop comparison2 id
					var var2t = types.pop(); // Pop comparison2 type
					var var1 = ids.pop(); // Pop comparison1 id
					var var1t = types.pop(); // Pop comparison1 type
					var op = ops.pop(); // Pop op
					var type = validateSem(op, var1t, var2t); // Validates types are compatible
					if (type !== "x") { // If compatible
						var op = [op, findDir(yy, var1), findDir(yy, var2), findDir(yy, createTemp(yy, type))]; // Adds logical_ops quad
					} else {
						throw new Error("ILLOGICAL COMPARISON");
					}
					yy.quads.push(op);
				
break;
case 56:
ops.push("&&");
break;
case 57:
ops.push("||");
break;
case 59:

					var var2 = ids.pop(); // Pop exp2 id
					var var2t = types.pop(); // Pop exp2 type
					var var1 = ids.pop(); // Pop exp1 id
					var var1t = types.pop(); // Pop exp1 type
					var op = ops.pop(); // Pop op
					var type = validateSem(op, var1t, var2t); // Validates types are compatible
					if (type !== "x") { // If compatible
						var op = [op, findDir(yy, var1), findDir(yy, var2), findDir(yy, createTemp(yy, type))]; // Adds comparison quad
					} else {
						throw new Error("ILLOGICAL COMPARISON");
					}
					yy.quads.push(op);
				
break;
case 60:
ops.push("<=");
break;
case 61:
ops.push(">=");
break;
case 62:
ops.push("!=");
break;
case 63:
ops.push("==");
break;
case 64:
ops.push(">");
break;
case 65:
ops.push("<");
break;
case 69:

					if (ops.stackTop() === "+" || ops.stackTop() === "-") { // If first from ops stack is + or -
						var var2 = ids.pop(); // Pop value2 id
						var var2t = types.pop(); // Pop value2 type
						var var1 = ids.pop(); // Pop value1 id
						var var1t = types.pop(); // Pop value1 type
						var op = ops.pop(); // Pop ops
						var type = validateSem(op, var1t, var2t); // Validates types are compatible
						if(type !== "x") {
							var op = [op, findDir(yy, var1), findDir(yy, var2), findDir(yy, createTemp(yy, type))];
						} else {
							throw new Error("INVALID TYPES");
						}
						yy.quads.push(op); // Adds + or - quad
					}
				
break;
case 70: case 71: case 76: case 77:
ops.push($$[$0]);
break;
case 75:

					if (ops.stackTop() === "*" || ops.stackTop() === "/") { // If first from ops stack is * or /
						var var2 = ids.pop(); // Pop value2 id
						var var2t = types.pop(); // Pop value2 type
						var var1 = ids.pop(); // Pop value1 id
						var var1t = types.pop(); // Pop value1 type
						var op = ops.pop(); // Pop ops
						var type = validateSem(op, var1t, var2t); // Validates types are compatible
						if (type !== "x") {
							var op = [op, findDir(yy, var1), findDir(yy, var2), findDir(yy, createTemp(yy, type))];
						} else {
							throw new Error("INVALID TYPES");
						}
						yy.quads.push(op); // Adds * or / quad
					}
				
break;
case 81:

					var proc = findProc(yy, $$[$0]);
					if (proc !== "undefined") {
						ids.push($$[$0]);
						types.push(proc.type);
						expectingParams = true;
					} else {
						ids.push($$[$0]);
						types.push(findTypeId(yy, $$[$0]));
						expectingParams = false;
					}
				
break;
case 84:

					if (expectingParams) {
						throw new Error("NEED PARAMETERS");
					}
				
break;
case 85:

					if (tempProc.type !== "void") {
						var temp = createTemp(yy, tempProc.type);
						yy.quads.push(["gosub",tempProc.init,null,findDir(yy,temp)]);
					} else {
						yy.quads.push(["gosub",tempProc.init,null,null]);
					}

					ops.pop();
					tempProc = null;
					expectingParams = false;
				
break;
case 86:

						var id = ids.pop();
						tempProc = findProc(yy, id);
						yy.quads.push(["era",tempProc.dir,null,null]);
						types.pop();
						ops.push("|");
						paramTemp = 0;
				
break;
case 90:

					var id = ids.pop(); // Pop from stack
					var type = types.pop(); // Pop from stack
					if (paramTemp >= tempProc.numParams()) { // If the numbers of params is higher than what is expected
						throw new Error("INCORRECT PARAMETERS");
					}

					if (tempProc.params[paramTemp].type === type || (tempProc.params[paramTemp].type === "float" && type === "int") ) {
						if (tempProc.params[paramTemp].dim > 0) { // if there are many params
							yy.quads.push(["param", "(" + findDir(yy, id) + "," + tempProc.params[paramTemp].dim + ")", null, ++paramTemp]);
						} else {
							yy.quads.push(["param", findDir(yy, id), null, ++paramTemp]);
						}
					} else {
						throw new Error("INVALID TYPES");
					}
					// ops.pop();
				
break;
case 93:

					var id = ids.pop(); // Pop exp id
					var type = types.pop(); // Pop exp type
					var id_array = ids.pop();  // Pop array id
					var type_array = types.pop(); // Pop array type

					var dims = findDim(yy, id_array); // Find dim size
					if (dims.length == 2 || dims.length == 0) {
						throw new Error("INCORRECT ARRAY DIMENSION"); // Incorrect size
					}

					if (type != "int") { // Must be int
						throw new Error("ARRAY POINTERS ONLY HANDLE INTS");
					}

					yy.quads.push(["verify", findDir(yy, id), 0, dims[0]-1]); // Pushes verify to quad from 0 to dims[0]-1
					yy.quads.push(["++", findDir(yy, id_array), findDir(yy, id), "(" + findDir(yy, createTemp(yy, type_array)) + ")"]); // DirBase + s1
				
break;
case 94:

					var var1 = ids.pop(); // Pop exp2 id
					var var1t = types.pop(); // Pop exp2 type
					var var2 = ids.pop(); // Pop exp1 id
					var var2t = types.pop(); // Pop exp1 type
					var id = ids.pop(); // Pop array id
					var idt = types.pop();; // Pop array type

					var dims = findDim(yy, id); // Find dim size
					if (dims.length != 2) {
						throw new Error("INCORRECT ARRAY DIMENSION") // Incorrect size
					}

					if (var2t != "int") { // Must be int
						throw new Error("ARRAY POINTERS ONLY HANDLE INTS");
					}

					yy.quads.push(["verify", findDir(yy, var2), 0, dims[0]-1]);  // Pushes verify to quad from 0 to dims[0]-1
					yy.quads.push(["*", findDir(yy, var2), findDir(yy, parseInt(dims[0])), findDir(yy, createTemp(yy, var2t))]); // s1 * m1

					var multpointer = ids.pop();
					var multpointertype = types.pop();

					yy.quads.push(["verify", findDir(yy, var1), 0, dims[1]-1]);  // Pushes verify to quad from 0 to dims[1]-1
					yy.quads.push(["+", findDir(yy, multpointer), findDir(yy, var1), findDir(yy, createTemp(yy, multpointertype))]); // (s1 * m1) + s2

					var sumpointer = ids.pop();
					var sumpointertype = types.pop();

					yy.quads.push(["++", findDir(yy, id), findDir(yy, sumpointer), "(" + findDir(yy, createTemp(yy, idt)) + ")"]); // DirBase + s
				
break;
case 95:
ops.push("|");
break;
case 96:
ops.pop();
break;
case 97:

					// Add INT to constant
					yy.consts.push([parseInt($$[$0]), assignMemory("int", false, true, [])]);
					// Pushes to stack
					types.push("int");
					ids.push(parseInt($$[$0]));
				
break;
case 98:

					// Add FLOAT to constant
					yy.consts.push([parseFloat($$[$0]), assignMemory("float", false, true, [])]);
					types.push("float");
					ids.push(parseFloat($$[$0]));
				
break;
case 99:

					// Add BOOLEAN to constant
					yy.consts.push([$$[$0], assignMemory("boolean", false, true, [])]);
					// Pushes to stack
					types.push("boolean");
					ids.push($$[$0]);
				
break;
case 100:

					// Add STRING to constant
					yy.consts.push([$$[$0], assignMemory("string", false, true, [])]);
					// Pushes to stack
					types.push("string");
					ids.push($$[$0]);
				
break;
}
},
table: [{3:1,4:[1,2],5:3,7:[1,4]},{1:[3]},{1:[2,1]},o($V0,$V1,{6:5,10:6,12:$V2,14:$V3}),{8:[1,9]},{1:[2,2]},{4:$V4,11:10,25:$V5},{13:13,15:14,20:$V6,21:$V7,22:$V8,23:$V9,24:$Va},{13:20,15:14,20:$V6,21:$V7,22:$V8,23:$V9,24:$Va},{9:[1,21]},{1:[2,4]},{15:24,20:$V6,21:$V7,22:$V8,23:$V9,24:$Va,26:22,27:23},{1:[2,18]},{9:$V1,10:25,12:$V2,14:$V3},{8:[1,26]},{8:[2,12]},{8:[2,13]},{8:[2,14]},{8:[2,15]},{8:[2,16]},o($Vb,$V1,{10:27,12:$V2,14:$V3}),o([4,12,14,25],[2,3]),{4:$V4,11:28,25:$V5},{28:29,30:[1,30]},{8:[1,31]},{9:[1,32]},o($Vc,$Vd,{16:33,17:$Ve}),o($Vb,[2,6]),{1:[2,17]},{29:35,33:[1,36]},{14:$Vf,15:39,20:$V6,21:$V7,22:$V8,23:$V9,24:$Va,31:37,32:$Vg,36:38},{30:[2,20]},o($Vb,$V1,{10:41,12:$V2,14:$V3}),o($Vc,[2,8]),{18:[1,42]},o($V0,[2,19]),o($Vh,$V1,{10:43,12:$V2,14:$V3}),{32:[1,44]},{14:$Vf,15:39,20:$V6,21:$V7,22:$V8,23:$V9,24:$Va,31:45,32:$Vg,36:38},{8:[1,46]},{15:47,20:$V6,21:$V7,22:$V8,23:$V9,24:$Va},o($Vb,[2,5]),{19:[1,48]},{8:$Vi,18:$Vj,30:$Vk,34:49,35:$Vl,37:50,38:51,39:52,40:53,41:54,42:55,43:56,44:57,45:$Vm,47:63,49:$Vn,50:$Vo,57:61,60:$Vp,61:$Vq,62:65,66:66,71:67,77:68,83:69,84:70,95:$Vr,96:$Vs,97:$Vt},{33:[2,21]},{32:[2,23]},o($Vu,$Vd,{16:77,17:$Ve}),{8:[1,78]},o($Vv,[2,9],{17:[1,79]}),{35:[1,80]},{35:[2,27]},{8:$Vi,18:$Vj,30:$Vk,35:$Vl,37:81,38:51,39:52,40:53,41:54,42:55,43:56,44:57,45:$Vm,47:63,49:$Vn,50:$Vo,57:61,60:$Vp,61:$Vq,62:65,66:66,71:67,77:68,83:69,84:70,95:$Vr,96:$Vs,97:$Vt},o($Vh,[2,30]),o($Vh,[2,31]),o($Vh,[2,32]),o($Vh,[2,33]),o($Vh,[2,34]),o($Vh,[2,35]),{8:[1,82]},{30:[1,83]},{30:[1,85],51:84},{30:[1,87],58:86},{8:$Vi,18:$Vj,30:$Vk,47:88,62:65,66:66,71:67,77:68,83:69,84:70,95:$Vr,96:$Vs,97:$Vt},{9:[1,89]},{30:[2,49]},o($Vw,[2,54],{63:90,64:[1,91],65:[1,92]}),o($Vx,[2,58],{67:93,46:[1,97],68:[1,94],69:[1,95],70:[1,96]}),o($Vy,[2,69],{72:98,73:99}),o($Vz,[2,75],{78:100,79:101}),o($Vz,[2,78]),o($Vz,[2,84],{85:102,88:103,89:104,93:106,94:107,17:[1,108],30:[1,105]}),o($VA,$VB,{86:109}),o($Vz,[2,97]),o($Vz,[2,98]),o($Vz,[2,99]),o($Vz,[2,100]),o([9,14,17,19,30,32,46,64,65,68,69,70,75,76,81,82],[2,81]),o($Vu,[2,25]),o($Vu,$Vd,{16:110,17:$Ve}),{18:[1,111]},o($V0,[2,22]),{35:[2,28]},{17:[1,113],46:[1,112]},{8:$Vi,18:$Vj,30:$Vk,47:114,62:65,66:66,71:67,77:68,83:69,84:70,95:$Vr,96:$Vs,97:$Vt},{33:[1,116],52:115},{8:$Vi,18:$Vj,30:$Vk,47:117,62:65,66:66,71:67,77:68,83:69,84:70,95:$Vr,96:$Vs,97:$Vt},{33:[1,119],59:118},{8:$Vi,18:$Vj,30:$Vk,47:120,62:65,66:66,71:67,77:68,83:69,84:70,95:$Vr,96:$Vs,97:$Vt},{9:[1,121]},o($Vh,[2,53]),{8:$Vi,18:$Vj,30:$Vk,62:122,66:66,71:67,77:68,83:69,84:70,95:$Vr,96:$Vs,97:$Vt},{64:[1,123]},{65:[1,124]},{8:$Vi,18:$Vj,30:$Vk,66:125,71:67,77:68,83:69,84:70,95:$Vr,96:$Vs,97:$Vt},o($VA,[2,65],{46:[1,126]}),o($VA,[2,64],{46:[1,127]}),{46:[1,128]},{46:[1,129]},o($VC,[2,66]),o($VC,[2,68],{74:130,75:[1,131],76:[1,132]}),o($Vy,[2,72]),o($Vy,[2,74],{80:133,81:[1,134],82:[1,135]}),o($Vz,[2,79]),o($Vz,[2,82]),o($Vz,[2,83]),o([8,18,30,32,95,96,97],[2,86],{90:136}),o($Vz,[2,91]),o($Vz,[2,92]),o($VA,$VB,{86:137}),{8:$Vi,18:$Vj,30:$Vk,47:138,62:65,66:66,71:67,77:68,83:69,84:70,95:$Vr,96:$Vs,97:$Vt},o($Vu,[2,26]),{19:[1,139]},{8:$Vi,18:$Vj,30:$Vk,47:140,62:65,66:66,71:67,77:68,83:69,84:70,95:$Vr,96:$Vs,97:$Vt},{8:$Vi,18:$Vj,30:$Vk,47:141,62:65,66:66,71:67,77:68,83:69,84:70,95:$Vr,96:$Vs,97:$Vt},{32:[1,142]},o($Vh,[2,45],{53:143,54:144,56:[1,145]}),{8:$Vi,18:$Vj,30:$Vk,34:146,35:$Vl,37:50,38:51,39:52,40:53,41:54,42:55,43:56,44:57,45:$Vm,47:63,49:$Vn,50:$Vo,57:61,60:$Vp,61:$Vq,62:65,66:66,71:67,77:68,83:69,84:70,95:$Vr,96:$Vs,97:$Vt},{32:[1,147]},o($Vh,[2,48]),{8:$Vi,18:$Vj,30:$Vk,34:148,35:$Vl,37:50,38:51,39:52,40:53,41:54,42:55,43:56,44:57,45:$Vm,47:63,49:$Vn,50:$Vo,57:61,60:$Vp,61:$Vq,62:65,66:66,71:67,77:68,83:69,84:70,95:$Vr,96:$Vs,97:$Vt},{32:[1,149]},o($Vh,[2,52]),o($Vw,[2,55]),o($VA,[2,56]),o($VA,[2,57]),o($Vx,[2,59]),o($VA,[2,60]),o($VA,[2,61]),o($VA,[2,62]),o($VA,[2,63]),{8:$Vi,18:$Vj,30:$Vk,66:150,71:67,77:68,83:69,84:70,95:$Vr,96:$Vs,97:$Vt},o($VA,[2,70]),o($VA,[2,71]),{8:$Vi,18:$Vj,30:$Vk,71:151,77:68,83:69,84:70,95:$Vr,96:$Vs,97:$Vt},o($VA,[2,76]),o($VA,[2,77]),{8:$Vi,18:$Vj,30:$Vk,32:$VD,47:154,62:65,66:66,71:67,77:68,83:69,84:70,91:152,92:153,95:$Vr,96:$Vs,97:$Vt},{8:$Vi,18:$Vj,30:$Vk,47:155,62:65,66:66,71:67,77:68,83:69,84:70,95:$Vr,96:$Vs,97:$Vt},{32:$VE,87:156},o($Vv,[2,10]),{9:[1,157]},{19:[1,158]},{9:[1,159]},o($Vh,[2,41]),{33:[1,161],55:160},{33:[2,46]},{35:[1,162]},{33:[2,42]},{35:[1,163]},{33:[2,50]},o($VC,[2,67]),o($Vy,[2,73]),{32:[1,164]},{14:[1,165],32:[2,87]},o([14,32],[2,90]),{19:$VE,87:166},{32:[1,167]},o($Vh,[2,36]),{17:[1,169],46:[1,168]},o($Vh,[2,40]),o($Vh,[2,44]),{8:$Vi,18:$Vj,30:$Vk,34:170,35:$Vl,37:50,38:51,39:52,40:53,41:54,42:55,43:56,44:57,45:$Vm,47:63,49:$Vn,50:$Vo,57:61,60:$Vp,61:$Vq,62:65,66:66,71:67,77:68,83:69,84:70,95:$Vr,96:$Vs,97:$Vt},o([8,18,30,35,45,49,50,56,60,61,95,96,97],[2,43]),o($Vh,[2,51]),o($Vz,[2,85]),{8:$Vi,18:$Vj,30:$Vk,32:$VD,47:154,62:65,66:66,71:67,77:68,83:69,84:70,91:171,92:153,95:$Vr,96:$Vs,97:$Vt},{19:[1,172]},o($Vz,[2,80]),{8:$Vi,18:$Vj,30:$Vk,47:173,62:65,66:66,71:67,77:68,83:69,84:70,95:$Vr,96:$Vs,97:$Vt},{8:$Vi,18:$Vj,30:$Vk,47:174,62:65,66:66,71:67,77:68,83:69,84:70,95:$Vr,96:$Vs,97:$Vt},{35:[1,175]},{32:[2,88]},o($Vz,[2,93],{17:[1,176]}),{9:[1,177]},{19:[1,178]},o($Vh,[2,47]),o($VA,$VB,{86:179}),o($Vh,[2,37]),{46:[1,180]},{8:$Vi,18:$Vj,30:$Vk,47:181,62:65,66:66,71:67,77:68,83:69,84:70,95:$Vr,96:$Vs,97:$Vt},{8:$Vi,18:$Vj,30:$Vk,47:182,62:65,66:66,71:67,77:68,83:69,84:70,95:$Vr,96:$Vs,97:$Vt},{19:$VE,87:183},{9:[1,184]},{19:[1,185]},o($Vh,[2,38]),o($Vz,[2,94])],
defaultActions: {2:[2,1],5:[2,2],10:[2,4],12:[2,18],15:[2,12],16:[2,13],17:[2,14],18:[2,15],19:[2,16],28:[2,17],31:[2,20],44:[2,21],45:[2,23],50:[2,27],64:[2,49],81:[2,28],145:[2,46],147:[2,42],149:[2,50],171:[2,88]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        function lex() {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};


/**
	VARS
**/

var dirProcs;

var gv_i;
var gv_f;
var gv_st;
var gv_bool;

var lv_i;
var lv_f;
var lv_st;
var lv_bool;

var tv_i;
var tv_f;
var tv_st;
var tv_bool;

var cv_i;
var cv_f;
var cv_st;
var cv_bool;

/**
	Data Structures definiton that let me pop, push, and stackTop
**/

var dataStructures = {
    stack : function() {
        var elements = [];

        this.push = function(element) {
            elements.push(element);
        }
        this.pop = function() {
            return elements.pop();
        }
        this.stackTop = function(element) {
            return elements[elements.length - 1];
        }
    }
}

/**
	Create new data structures (stacks)
**/

var ids = new dataStructures.stack(); // Ids
var types = new dataStructures.stack(); // Types
var ops = new dataStructures.stack(); // Ops
var scope = new dataStructures.stack(); // Scope
var jumps = new dataStructures.stack() // Jumps

/**
	Semantic Cube
**/

var semanticCube = [
	["v","v","+","-","/","*","==","<","<=",">",">=","&&","||","!="],
	["int","int","int","int","int","int","boolean","boolean","boolean","boolean","boolean","x","x","boolean"],
	["float","float","float","float","float","float","b","b","b","b","b","x","x","boolean"],
	["string","string","string","x","x","x","x","x","x","x","x","x","x","x"],
	["boolean","boolean","x","x","x","x","boolean","x","x","x","x","boolean","boolean","boolean"],
	["int","float","float","float","float","float","boolean","boolean","boolean","boolean","boolean","x","x","boolean"],
	["int","string","x","x","x","x","x","x","x","x","x","x","x","x"],
	["int","boolean","x","x","x","x","x","x","x","x","x","x","x","x"],
	["float","int","float","float","float","float","boolean","boolean","boolean","boolean","boolean","x","x","boolean"],
	["float","string","x","x","x","x","x","x","x","x","x","x","x","x"],
	["float","boolean","x","x","x","x","x","x","x","x","x","x","x","x"],
	["string","int","x","x","x","x","x","x","x","x","x","x","x","x"],
	["string","float","x","x","x","x","x","x","x","x","x","x","x","x"],
	["string","boolean","x","x","x","x","x","x","x","x","x","x","x","x"],
	["boolean","int","x","x","x","x","x","x","x","x","x","x","x","x"],
	["boolean","float","x","x","x","x","x","x","x","x","x","x","x","x"],
	["boolean","string","x","x","x","x","x","x","x","x","x","x","x","x"]
];

/**
	Initialze variables.
**/

var temp = 1; // Temp var
var paramTemp = 1; // Temp parameter
var tempProc = null; // Temp proc
var expectingParams = false; // Epecting params

/**
	Japtor main definition. This is what is returned when parsed in the HTML.
**/

var Japtor = function() {
	var japtorLexer = function () {};
	japtorLexer.prototype = parser.lexer;
	initDirs();
	var japtorParser = function () {
		this.lexer = new japtorLexer();
		this.yy = {
			procs: [], // Procs
			quads: [], // Quads
			consts: [] // Consts
		};
	};
	japtorParser.prototype = parser;
	var newParser = new japtorParser();
	return newParser;
};

/**
	Proc definition. Each function has a proc, where it stores vars, params, etc..
**/

function Proc(name, type, dir, params, vars, init){
	this.name = name;
	this.type = type;
	this.dir = dir;
	this.params = params;
	this.vars = vars;
	this.init = init;
};

/**
	Extra proc definition
**/

Proc.prototype = {
	size : function() { // Returns the size of the proc by counting vars
		var int = 0; var float = 0; var string = 0; var boolean = 0;
		var int_t = 0; var float_t = 0; var string_t = 0; var boolean_t = 0;
		for (var i = 0; i < this.vars.length; i++) {
			if (this.vars[i].id.indexOf("tmp__") > -1) {
				switch (this.vars[i].type) {
					case 'int':
						int_t++;
						break;
					case 'float':
						float_t++;
						break;
					case 'string':
						string_t++;
						break;
					case 'boolean':
						boolean_t++;
						break;
				}
			} else {
				switch (this.vars[i].type) {
					case 'int':
						int++;
						break;
					case 'float':
						float++;
						break;
					case 'string':
						string++;
						break;
					case 'boolean':
						boolean++;
						break;
				}
			}
		}
		return [int, float, string, boolean, int_t, float_t, string_t, boolean_t];
	},
	dirs : function() { // Returns dir
		var int = 0; var float = 0; var string = 0; var boolean = 0;
		var int_t = 0; var float_t = 0; var string_t = 0; var boolean_t = 0;
		for (var i = 0; i < this.vars.length; i++) {
			if (this.vars[i].id.indexOf("tmp__") > -1) {
				switch (this.vars[i].type) {
					case 'int':
						if(int_t === 0)
							int_t = this.vars[i].dir;
						break;
					case 'float':
						if(float_t === 0)
							float_t = this.vars[i].dir;
						break;
					case 'string':
						if(string_t === 0)
							string_t = this.vars[i].dir;
						break;
					case 'boolean':
						if(boolean_t === 0)
							boolean_t = this.vars[i].dir;
						break;
				}
			} else {
				switch (this.vars[i].type) {
					case 'int':
						if(int === 0)
							int = this.vars[i].dir;
						break;
					case 'float':
						if(float === 0)
							float = this.vars[i].dir;
						break;
					case 'string':
						if(string === 0)
							string = this.vars[i].dir;
						break;
					case 'boolean':
						if(boolean === 0)
							boolean = this.vars[i].dir;
						break;
				}
			}
		}
		return [int, float, string, boolean, int_t, float_t, string_t, boolean_t];
	},
	numParams : function() { // Returns number of params
		return this.params.length;
	}
}

/**
	Dir Proc
	Returns the next available proc.
**/

function dirProc() {
	if (dirProcs < 5000) {
		return dirProcs++;
	} else {
		throw new Error("OUT OF MEMORY");
	}
}

/**
	Assign Memory
	Assigns a var with a dir depending on type and it tmp or const or dim.
**/

function assignMemory(type, tmp, cons, dim) {

	var pointer = 1;
	var temp = null;

	// If global
	var isGlobal = false;
	if (scope.stackTop() === "global") {
		isGlobal = true;
	}

	//If Matrix
	if (dim.length == 2) {
		pointer = parseInt(dim[0]) * parseInt(dim[1]) + parseInt(dim[0]);
	//If Array
	} else if (dim.length == 1) {
		pointer = parseInt(dim[0]);
	}

	// If temporal
	if (tmp) {
		switch (type) {
			case 'int':
				if (tv_i < 21000) {
					return tv_i++;
				} else {
					throw new Error("OUT OF MEMORY");
				}
				break;
			case 'float':
				if (tv_f < 23000) {
					return tv_f++;
				} else {
					throw new Error("OUT OF MEMORY");
				}
				break;
			case 'string':
				if (tv_st < 25000) {
					return tv_st++;
				} else {
					throw new Error("OUT OF MEMORY");
				}
				break;
			case 'boolean':
				if (tv_bool < 26000) {
					return tv_bool++;
				} else {
					throw new Error("OUT OF MEMORY");
				}
				break;
		}
	} else if (cons) { // If constant
		switch (type) {
			case 'int':
				if (cv_i < 28000) {
					return cv_i++;
				} else {
					throw new Error("OUT OF MEMORY");
				}
				break;
			case 'float':
				if (cv_f < 30000) {
					return cv_f++;
				} else {
					throw new Error("OUT OF MEMORY");
				}
				break;
			case 'string':
				if (cv_st < 32000) {
					return cv_st++;
				} else {
					throw new Error("OUT OF MEMORY");
				}
				break;
			case 'boolean':
				if (cv_bool < 33000) {
					return cv_bool++;
				} else {
					throw new Error("OUT OF MEMORY");
				}
				break;
		}
	} else {
		if (isGlobal) { // If global
			switch (type) {
				case 'int':
					if (gv_i < 7000) {
						temp = gv_i;
						gv_i = gv_i + pointer;
						return temp;
					} else {
						throw new Error("OUT OF MEMORY");
					}
					break;
				case 'float':
					if (gv_f < 9000) {
						temp = gv_f;
						gv_f = gv_f + pointer;
						return temp;
					} else {
						throw new Error("OUT OF MEMORY");
					}
					break;
				case 'string':
					if (gv_st < 11000) {
						temp = gv_st;
						gv_st = gv_st + pointer;
						return temp;
					} else {
						throw new Error("OUT OF MEMORY");
					}
					break;
				case 'boolean':
					if (gv_bool < 12000) {
						temp = gv_bool;
						gv_bool = gv_bool + pointer;
						return temp;
					} else {
						throw new Error("OUT OF MEMORY");
					}
					break;
			}
		} else { // If local
			switch (type) {
				case 'int':
					if (lv_i < 14000) {
						temp = lv_i;
						lv_i = lv_i + pointer;
						return temp;
					} else {
						throw new Error("OUT OF MEMORY");
					}
					break;
				case 'float':
					if (lv_f < 16000) {
						temp = lv_f;
						lv_f = lv_f + pointer;
						return temp;
					} else {
						throw new Error("OUT OF MEMORY");
					}
					break;
				case 'string':
					if (lv_st < 18000) {
						temp = lv_st;
						lv_st = lv_st + pointer;
						return temp;
					} else {
						throw new Error("OUT OF MEMORY");
					}
					break;
				case 'boolean':
					if (lv_bool < 19000) {
						temp = lv_bool;
						lv_bool = lv_bool + pointer;
						return temp;
					} else {
						throw new Error("OUT OF MEMORY");
					}
					break;
			}
		}
	}
}

/**
	Initialize directories
**/

function initDirs() {
	dirProcs = 2000;

	gv_i = 5000;
	gv_f = 7000;
	gv_st = 9000;
	gv_bool = 11000;

	lv_i = 12000;
	lv_f = 14000;
	lv_st = 16000;
	lv_bool = 18000;

	tv_i = 19000;
	tv_f = 21000;
	tv_st = 23000;
	tv_bool = 25000;

	cv_i = 26000;
	cv_f = 28000;
	cv_st = 30000;
	cv_bool = 32000;
}

/**
	Validate Semantic
	Validates the types are compatible and returns type.
**/

function validateSem(op, var1, var2) {
		for (var i = 0; i < semanticCube.length; i++) {
			if (semanticCube[i][0] === var1 && semanticCube[i][1] === var2) {
				for (var j = 0; j < semanticCube[0].length; j++) {
					if (semanticCube[0][j] === op)
						return semanticCube[i][j];
				}
			}
		}
}

/**
	Find Type By Id.
	Finds the type of an id in the given local scope, and if not found, global.
**/

function findTypeId(yy, id) {
	var currentScope = scope.stackTop();
	var proc = findProc(yy, currentScope);

	for (var i = 0; i < proc.vars.length; i++) {
		if (proc.vars[i].id === id) {
			return proc.vars[i].type;
		}
	}

	proc = findProc(yy, "global");
	for(var i = 0; i < proc.vars.length; i++) {
		if(proc.vars[i].id === id) {
			return proc.vars[i].type;
		}
	}

	throw new Error("ID NOT DECLARED");
}

/**
	Find Proc
	Finds and returns the proc by id.
**/

function findProc(yy, name) {
	for (var i = 0; i < yy.procs.length; i++) {
		if (yy.procs[i].name === name) {
			return yy.procs[i];
		}
	}

	return "undefined";
}

/**
	Create Temp
	Creates a temp var dependant on type.
**/

function createTemp(yy, type) {
	var currentScope = scope.stackTop();
	var proc = findProc(yy, currentScope);

	var tmp = {
		dir: assignMemory(type, true, false, []),
		id: "tmp__"+temp,
		type: type
	}

	ids.push(tmp.id);
	types.push(tmp.type);
	temp++;

	proc.vars.push(tmp);

	return tmp.id;
}

/**
	Find dir
	Returns the dir of the id.
**/

function findDir(yy, id) {
	// return id;
	var currentScope = scope.stackTop();
	var proc = findProc(yy, currentScope);

	for (var i = 0; i < proc.vars.length; i++) {
		if (proc.vars[i].id === id) {
			return proc.vars[i].dir;
		}
	}

	proc = findProc(yy, "global");
	for (var i = 0; i < proc.vars.length; i++) {
		if (proc.vars[i].id === id) {
			return proc.vars[i].dir;
		}
	}

	for (var i = 0; i < yy.consts.length; i++) {
		if(yy.consts[i][0] === id) {
			return yy.consts[i][1];
		}
	}

	throw new Error("ID NOT DECLARED");
}

/**
	Find dim
	Returns the dim of the id
**/

function findDim(yy, id) {
	var currentScope = scope.stackTop();
	var proc = findProc(yy, currentScope);

	for (var i = 0; i < proc.vars.length; i++) {
		if (proc.vars[i].id === id) {
			return proc.vars[i].dim;
		}
	}

	proc = findProc(yy, "global");
	for (var i = 0; i < proc.vars.length; i++) {
		if (proc.vars[i].id === id) {
			return proc.vars[i].dim;
		}
	}
}

if (typeof(window) !== 'undefined') {
	window.Japtor = Japtor;
} else {
	parser.Japtor = Japtor;
}
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* ignore whitespace */;
break;
case 1:return 7;
break;
case 2:return 25;
break;
case 3:return 95;
break;
case 4:return 18;
break;
case 5:return 96;
break;
case 6:return 9;
break;
case 7:return ':';
break;
case 8:return 33;
break;
case 9:return 35;
break;
case 10:return 30;
break;
case 11:return 32;
break;
case 12:return 17;
break;
case 13:return 19;
break;
case 14:return 68;
break;
case 15:return 69;
break;
case 16:return 70;
break;
case 17:return "=";
break;
case 18:return "+";
break;
case 19:return "-";
break;
case 20:return 81;
break;
case 21:return 82;
break;
case 22:return 14;
break;
case 23:return 64;
break;
case 24:return "|";
break;
case 25:return 12;
break;
case 26:return 20;
break;
case 27:return 21;
break;
case 28:return 22;
break;
case 29:return 23;
break;
case 30:return 24;
break;
case 31:return 49;
break;
case 32:return 50;
break;
case 33:return 56;
break;
case 34:return 60;
break;
case 35:return 61;
break;
case 36:return 45;
break;
case 37:return 8;
break;
case 38:return 97;
break;
case 39:return 4;
break;
}
},
rules: [/^(?:\s+)/,/^(?:program\b)/,/^(?:function\b)/,/^(?:[0-9]*\.[0-9]+)/,/^(?:[0-9]+)/,/^(?:true|false\b)/,/^(?:;)/,/^(?::)/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:<)/,/^(?:>)/,/^(?:!)/,/^(?:=)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:,)/,/^(?:&)/,/^(?:\|)/,/^(?:var\b)/,/^(?:int\b)/,/^(?:float\b)/,/^(?:string\b)/,/^(?:boolean\b)/,/^(?:void\b)/,/^(?:write\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:while\b)/,/^(?:return\b)/,/^(?:assign\b)/,/^(?:([a-zA-Z][a-zA-Z0-9]*)(|_)*([a-zA-Z][a-zA-Z0-9]*)*)/,/^(?:"[^\"]*"|'[^\']*	)/,/^(?:$)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}